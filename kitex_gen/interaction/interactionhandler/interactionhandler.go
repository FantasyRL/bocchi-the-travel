// Code generated by Kitex v0.9.1. DO NOT EDIT.

package interactionhandler

import (
	interaction "bocchi/kitex_gen/interaction"
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CommentCreate": kitex.NewMethodInfo(
		commentCreateHandler,
		newInteractionHandlerCommentCreateArgs,
		newInteractionHandlerCommentCreateResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CommentDelete": kitex.NewMethodInfo(
		commentDeleteHandler,
		newInteractionHandlerCommentDeleteArgs,
		newInteractionHandlerCommentDeleteResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CommentList": kitex.NewMethodInfo(
		commentListHandler,
		newInteractionHandlerCommentListArgs,
		newInteractionHandlerCommentListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	interactionHandlerServiceInfo                = NewServiceInfo()
	interactionHandlerServiceInfoForClient       = NewServiceInfoForClient()
	interactionHandlerServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return interactionHandlerServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return interactionHandlerServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return interactionHandlerServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "InteractionHandler"
	handlerType := (*interaction.InteractionHandler)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "interaction",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func commentCreateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionHandlerCommentCreateArgs)
	realResult := result.(*interaction.InteractionHandlerCommentCreateResult)
	success, err := handler.(interaction.InteractionHandler).CommentCreate(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionHandlerCommentCreateArgs() interface{} {
	return interaction.NewInteractionHandlerCommentCreateArgs()
}

func newInteractionHandlerCommentCreateResult() interface{} {
	return interaction.NewInteractionHandlerCommentCreateResult()
}

func commentDeleteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionHandlerCommentDeleteArgs)
	realResult := result.(*interaction.InteractionHandlerCommentDeleteResult)
	success, err := handler.(interaction.InteractionHandler).CommentDelete(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionHandlerCommentDeleteArgs() interface{} {
	return interaction.NewInteractionHandlerCommentDeleteArgs()
}

func newInteractionHandlerCommentDeleteResult() interface{} {
	return interaction.NewInteractionHandlerCommentDeleteResult()
}

func commentListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionHandlerCommentListArgs)
	realResult := result.(*interaction.InteractionHandlerCommentListResult)
	success, err := handler.(interaction.InteractionHandler).CommentList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionHandlerCommentListArgs() interface{} {
	return interaction.NewInteractionHandlerCommentListArgs()
}

func newInteractionHandlerCommentListResult() interface{} {
	return interaction.NewInteractionHandlerCommentListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CommentCreate(ctx context.Context, req *interaction.CommentCreateRequest) (r *interaction.CommentCreateResponse, err error) {
	var _args interaction.InteractionHandlerCommentCreateArgs
	_args.Req = req
	var _result interaction.InteractionHandlerCommentCreateResult
	if err = p.c.Call(ctx, "CommentCreate", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CommentDelete(ctx context.Context, req *interaction.CommentDeleteRequest) (r *interaction.CommentDeleteResponse, err error) {
	var _args interaction.InteractionHandlerCommentDeleteArgs
	_args.Req = req
	var _result interaction.InteractionHandlerCommentDeleteResult
	if err = p.c.Call(ctx, "CommentDelete", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CommentList(ctx context.Context, req *interaction.CommentListRequest) (r *interaction.CommentListResponse, err error) {
	var _args interaction.InteractionHandlerCommentListArgs
	_args.Req = req
	var _result interaction.InteractionHandlerCommentListResult
	if err = p.c.Call(ctx, "CommentList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
