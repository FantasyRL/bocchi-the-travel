// Code generated by thriftgo (0.3.6). DO NOT EDIT.

package itinerary

import (
	"bocchi/kitex_gen/base"
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

type CreateItineraryRequest struct {
	FounderId         int64   `thrift:"founder_id,1" frugal:"1,default,i64" json:"founder_id"`
	Title             string  `thrift:"title,2" frugal:"2,default,string" json:"title"`
	ActionType        int64   `thrift:"action_type,3" frugal:"3,default,i64" json:"action_type"`
	Rectangle         *string `thrift:"rectangle,4,optional" frugal:"4,optional,string" json:"rectangle,omitempty"`
	RouteJson         *string `thrift:"route_json,5,optional" frugal:"5,optional,string" json:"route_json,omitempty"`
	Remark            *string `thrift:"remark,6,optional" frugal:"6,optional,string" json:"remark,omitempty"`
	ScheduleStartTime string  `thrift:"schedule_start_time,7" frugal:"7,default,string" json:"schedule_start_time"`
	ScheduleEndTime   string  `thrift:"schedule_end_time,8" frugal:"8,default,string" json:"schedule_end_time"`
	PartyId           int64   `thrift:"party_id,9" frugal:"9,default,i64" json:"party_id"`
}

func NewCreateItineraryRequest() *CreateItineraryRequest {
	return &CreateItineraryRequest{}
}

func (p *CreateItineraryRequest) InitDefault() {
	*p = CreateItineraryRequest{}
}

func (p *CreateItineraryRequest) GetFounderId() (v int64) {
	return p.FounderId
}

func (p *CreateItineraryRequest) GetTitle() (v string) {
	return p.Title
}

func (p *CreateItineraryRequest) GetActionType() (v int64) {
	return p.ActionType
}

var CreateItineraryRequest_Rectangle_DEFAULT string

func (p *CreateItineraryRequest) GetRectangle() (v string) {
	if !p.IsSetRectangle() {
		return CreateItineraryRequest_Rectangle_DEFAULT
	}
	return *p.Rectangle
}

var CreateItineraryRequest_RouteJson_DEFAULT string

func (p *CreateItineraryRequest) GetRouteJson() (v string) {
	if !p.IsSetRouteJson() {
		return CreateItineraryRequest_RouteJson_DEFAULT
	}
	return *p.RouteJson
}

var CreateItineraryRequest_Remark_DEFAULT string

func (p *CreateItineraryRequest) GetRemark() (v string) {
	if !p.IsSetRemark() {
		return CreateItineraryRequest_Remark_DEFAULT
	}
	return *p.Remark
}

func (p *CreateItineraryRequest) GetScheduleStartTime() (v string) {
	return p.ScheduleStartTime
}

func (p *CreateItineraryRequest) GetScheduleEndTime() (v string) {
	return p.ScheduleEndTime
}

func (p *CreateItineraryRequest) GetPartyId() (v int64) {
	return p.PartyId
}
func (p *CreateItineraryRequest) SetFounderId(val int64) {
	p.FounderId = val
}
func (p *CreateItineraryRequest) SetTitle(val string) {
	p.Title = val
}
func (p *CreateItineraryRequest) SetActionType(val int64) {
	p.ActionType = val
}
func (p *CreateItineraryRequest) SetRectangle(val *string) {
	p.Rectangle = val
}
func (p *CreateItineraryRequest) SetRouteJson(val *string) {
	p.RouteJson = val
}
func (p *CreateItineraryRequest) SetRemark(val *string) {
	p.Remark = val
}
func (p *CreateItineraryRequest) SetScheduleStartTime(val string) {
	p.ScheduleStartTime = val
}
func (p *CreateItineraryRequest) SetScheduleEndTime(val string) {
	p.ScheduleEndTime = val
}
func (p *CreateItineraryRequest) SetPartyId(val int64) {
	p.PartyId = val
}

var fieldIDToName_CreateItineraryRequest = map[int16]string{
	1: "founder_id",
	2: "title",
	3: "action_type",
	4: "rectangle",
	5: "route_json",
	6: "remark",
	7: "schedule_start_time",
	8: "schedule_end_time",
	9: "party_id",
}

func (p *CreateItineraryRequest) IsSetRectangle() bool {
	return p.Rectangle != nil
}

func (p *CreateItineraryRequest) IsSetRouteJson() bool {
	return p.RouteJson != nil
}

func (p *CreateItineraryRequest) IsSetRemark() bool {
	return p.Remark != nil
}

func (p *CreateItineraryRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateItineraryRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateItineraryRequest) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.FounderId = v
	}
	return nil
}
func (p *CreateItineraryRequest) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Title = v
	}
	return nil
}
func (p *CreateItineraryRequest) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.ActionType = v
	}
	return nil
}
func (p *CreateItineraryRequest) ReadField4(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Rectangle = &v
	}
	return nil
}
func (p *CreateItineraryRequest) ReadField5(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.RouteJson = &v
	}
	return nil
}
func (p *CreateItineraryRequest) ReadField6(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Remark = &v
	}
	return nil
}
func (p *CreateItineraryRequest) ReadField7(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ScheduleStartTime = v
	}
	return nil
}
func (p *CreateItineraryRequest) ReadField8(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ScheduleEndTime = v
	}
	return nil
}
func (p *CreateItineraryRequest) ReadField9(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.PartyId = v
	}
	return nil
}

func (p *CreateItineraryRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateItineraryRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateItineraryRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("founder_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.FounderId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateItineraryRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("title", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Title); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreateItineraryRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("action_type", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ActionType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CreateItineraryRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetRectangle() {
		if err = oprot.WriteFieldBegin("rectangle", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Rectangle); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CreateItineraryRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetRouteJson() {
		if err = oprot.WriteFieldBegin("route_json", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.RouteJson); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *CreateItineraryRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetRemark() {
		if err = oprot.WriteFieldBegin("remark", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Remark); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *CreateItineraryRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("schedule_start_time", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ScheduleStartTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *CreateItineraryRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("schedule_end_time", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ScheduleEndTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *CreateItineraryRequest) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("party_id", thrift.I64, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PartyId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *CreateItineraryRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateItineraryRequest(%+v)", *p)

}

func (p *CreateItineraryRequest) DeepEqual(ano *CreateItineraryRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.FounderId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Title) {
		return false
	}
	if !p.Field3DeepEqual(ano.ActionType) {
		return false
	}
	if !p.Field4DeepEqual(ano.Rectangle) {
		return false
	}
	if !p.Field5DeepEqual(ano.RouteJson) {
		return false
	}
	if !p.Field6DeepEqual(ano.Remark) {
		return false
	}
	if !p.Field7DeepEqual(ano.ScheduleStartTime) {
		return false
	}
	if !p.Field8DeepEqual(ano.ScheduleEndTime) {
		return false
	}
	if !p.Field9DeepEqual(ano.PartyId) {
		return false
	}
	return true
}

func (p *CreateItineraryRequest) Field1DeepEqual(src int64) bool {

	if p.FounderId != src {
		return false
	}
	return true
}
func (p *CreateItineraryRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Title, src) != 0 {
		return false
	}
	return true
}
func (p *CreateItineraryRequest) Field3DeepEqual(src int64) bool {

	if p.ActionType != src {
		return false
	}
	return true
}
func (p *CreateItineraryRequest) Field4DeepEqual(src *string) bool {

	if p.Rectangle == src {
		return true
	} else if p.Rectangle == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Rectangle, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateItineraryRequest) Field5DeepEqual(src *string) bool {

	if p.RouteJson == src {
		return true
	} else if p.RouteJson == nil || src == nil {
		return false
	}
	if strings.Compare(*p.RouteJson, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateItineraryRequest) Field6DeepEqual(src *string) bool {

	if p.Remark == src {
		return true
	} else if p.Remark == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Remark, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateItineraryRequest) Field7DeepEqual(src string) bool {

	if strings.Compare(p.ScheduleStartTime, src) != 0 {
		return false
	}
	return true
}
func (p *CreateItineraryRequest) Field8DeepEqual(src string) bool {

	if strings.Compare(p.ScheduleEndTime, src) != 0 {
		return false
	}
	return true
}
func (p *CreateItineraryRequest) Field9DeepEqual(src int64) bool {

	if p.PartyId != src {
		return false
	}
	return true
}

type CreateItineraryResponse struct {
	Base      *base.BaseResp  `thrift:"base,1" frugal:"1,default,base.BaseResp" json:"base"`
	Itinerary *base.Itinerary `thrift:"itinerary,2,optional" frugal:"2,optional,base.Itinerary" json:"itinerary,omitempty"`
}

func NewCreateItineraryResponse() *CreateItineraryResponse {
	return &CreateItineraryResponse{}
}

func (p *CreateItineraryResponse) InitDefault() {
	*p = CreateItineraryResponse{}
}

var CreateItineraryResponse_Base_DEFAULT *base.BaseResp

func (p *CreateItineraryResponse) GetBase() (v *base.BaseResp) {
	if !p.IsSetBase() {
		return CreateItineraryResponse_Base_DEFAULT
	}
	return p.Base
}

var CreateItineraryResponse_Itinerary_DEFAULT *base.Itinerary

func (p *CreateItineraryResponse) GetItinerary() (v *base.Itinerary) {
	if !p.IsSetItinerary() {
		return CreateItineraryResponse_Itinerary_DEFAULT
	}
	return p.Itinerary
}
func (p *CreateItineraryResponse) SetBase(val *base.BaseResp) {
	p.Base = val
}
func (p *CreateItineraryResponse) SetItinerary(val *base.Itinerary) {
	p.Itinerary = val
}

var fieldIDToName_CreateItineraryResponse = map[int16]string{
	1: "base",
	2: "itinerary",
}

func (p *CreateItineraryResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *CreateItineraryResponse) IsSetItinerary() bool {
	return p.Itinerary != nil
}

func (p *CreateItineraryResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateItineraryResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateItineraryResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Base = base.NewBaseResp()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}
func (p *CreateItineraryResponse) ReadField2(iprot thrift.TProtocol) error {
	p.Itinerary = base.NewItinerary()
	if err := p.Itinerary.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CreateItineraryResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateItineraryResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateItineraryResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateItineraryResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetItinerary() {
		if err = oprot.WriteFieldBegin("itinerary", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Itinerary.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreateItineraryResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateItineraryResponse(%+v)", *p)

}

func (p *CreateItineraryResponse) DeepEqual(ano *CreateItineraryResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.Itinerary) {
		return false
	}
	return true
}

func (p *CreateItineraryResponse) Field1DeepEqual(src *base.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateItineraryResponse) Field2DeepEqual(src *base.Itinerary) bool {

	if !p.Itinerary.DeepEqual(src) {
		return false
	}
	return true
}

type GetItineraryInfoRequest struct {
	ItineraryId int64 `thrift:"itinerary_id,1" frugal:"1,default,i64" json:"itinerary_id"`
}

func NewGetItineraryInfoRequest() *GetItineraryInfoRequest {
	return &GetItineraryInfoRequest{}
}

func (p *GetItineraryInfoRequest) InitDefault() {
	*p = GetItineraryInfoRequest{}
}

func (p *GetItineraryInfoRequest) GetItineraryId() (v int64) {
	return p.ItineraryId
}
func (p *GetItineraryInfoRequest) SetItineraryId(val int64) {
	p.ItineraryId = val
}

var fieldIDToName_GetItineraryInfoRequest = map[int16]string{
	1: "itinerary_id",
}

func (p *GetItineraryInfoRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetItineraryInfoRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetItineraryInfoRequest) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.ItineraryId = v
	}
	return nil
}

func (p *GetItineraryInfoRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetItineraryInfoRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetItineraryInfoRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("itinerary_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ItineraryId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetItineraryInfoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetItineraryInfoRequest(%+v)", *p)

}

func (p *GetItineraryInfoRequest) DeepEqual(ano *GetItineraryInfoRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ItineraryId) {
		return false
	}
	return true
}

func (p *GetItineraryInfoRequest) Field1DeepEqual(src int64) bool {

	if p.ItineraryId != src {
		return false
	}
	return true
}

type GetItineraryInfoResponse struct {
	Base      *base.BaseResp  `thrift:"base,1" frugal:"1,default,base.BaseResp" json:"base"`
	Itinerary *base.Itinerary `thrift:"itinerary,2,optional" frugal:"2,optional,base.Itinerary" json:"itinerary,omitempty"`
}

func NewGetItineraryInfoResponse() *GetItineraryInfoResponse {
	return &GetItineraryInfoResponse{}
}

func (p *GetItineraryInfoResponse) InitDefault() {
	*p = GetItineraryInfoResponse{}
}

var GetItineraryInfoResponse_Base_DEFAULT *base.BaseResp

func (p *GetItineraryInfoResponse) GetBase() (v *base.BaseResp) {
	if !p.IsSetBase() {
		return GetItineraryInfoResponse_Base_DEFAULT
	}
	return p.Base
}

var GetItineraryInfoResponse_Itinerary_DEFAULT *base.Itinerary

func (p *GetItineraryInfoResponse) GetItinerary() (v *base.Itinerary) {
	if !p.IsSetItinerary() {
		return GetItineraryInfoResponse_Itinerary_DEFAULT
	}
	return p.Itinerary
}
func (p *GetItineraryInfoResponse) SetBase(val *base.BaseResp) {
	p.Base = val
}
func (p *GetItineraryInfoResponse) SetItinerary(val *base.Itinerary) {
	p.Itinerary = val
}

var fieldIDToName_GetItineraryInfoResponse = map[int16]string{
	1: "base",
	2: "itinerary",
}

func (p *GetItineraryInfoResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetItineraryInfoResponse) IsSetItinerary() bool {
	return p.Itinerary != nil
}

func (p *GetItineraryInfoResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetItineraryInfoResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetItineraryInfoResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Base = base.NewBaseResp()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}
func (p *GetItineraryInfoResponse) ReadField2(iprot thrift.TProtocol) error {
	p.Itinerary = base.NewItinerary()
	if err := p.Itinerary.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetItineraryInfoResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetItineraryInfoResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetItineraryInfoResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetItineraryInfoResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetItinerary() {
		if err = oprot.WriteFieldBegin("itinerary", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Itinerary.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetItineraryInfoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetItineraryInfoResponse(%+v)", *p)

}

func (p *GetItineraryInfoResponse) DeepEqual(ano *GetItineraryInfoResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.Itinerary) {
		return false
	}
	return true
}

func (p *GetItineraryInfoResponse) Field1DeepEqual(src *base.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetItineraryInfoResponse) Field2DeepEqual(src *base.Itinerary) bool {

	if !p.Itinerary.DeepEqual(src) {
		return false
	}
	return true
}

type ShowPartyItineraryRequest struct {
	PartyId int64 `thrift:"party_id,1" frugal:"1,default,i64" json:"party_id"`
}

func NewShowPartyItineraryRequest() *ShowPartyItineraryRequest {
	return &ShowPartyItineraryRequest{}
}

func (p *ShowPartyItineraryRequest) InitDefault() {
	*p = ShowPartyItineraryRequest{}
}

func (p *ShowPartyItineraryRequest) GetPartyId() (v int64) {
	return p.PartyId
}
func (p *ShowPartyItineraryRequest) SetPartyId(val int64) {
	p.PartyId = val
}

var fieldIDToName_ShowPartyItineraryRequest = map[int16]string{
	1: "party_id",
}

func (p *ShowPartyItineraryRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ShowPartyItineraryRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ShowPartyItineraryRequest) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.PartyId = v
	}
	return nil
}

func (p *ShowPartyItineraryRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ShowPartyItineraryRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ShowPartyItineraryRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("party_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PartyId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ShowPartyItineraryRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ShowPartyItineraryRequest(%+v)", *p)

}

func (p *ShowPartyItineraryRequest) DeepEqual(ano *ShowPartyItineraryRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PartyId) {
		return false
	}
	return true
}

func (p *ShowPartyItineraryRequest) Field1DeepEqual(src int64) bool {

	if p.PartyId != src {
		return false
	}
	return true
}

type ShowPartyItineraryResponse struct {
	Base        *base.BaseResp    `thrift:"base,1" frugal:"1,default,base.BaseResp" json:"base"`
	Count       *int64            `thrift:"count,2,optional" frugal:"2,optional,i64" json:"count,omitempty"`
	Itineraries []*base.Itinerary `thrift:"itineraries,3,optional" frugal:"3,optional,list<base.Itinerary>" json:"itineraries,omitempty"`
}

func NewShowPartyItineraryResponse() *ShowPartyItineraryResponse {
	return &ShowPartyItineraryResponse{}
}

func (p *ShowPartyItineraryResponse) InitDefault() {
	*p = ShowPartyItineraryResponse{}
}

var ShowPartyItineraryResponse_Base_DEFAULT *base.BaseResp

func (p *ShowPartyItineraryResponse) GetBase() (v *base.BaseResp) {
	if !p.IsSetBase() {
		return ShowPartyItineraryResponse_Base_DEFAULT
	}
	return p.Base
}

var ShowPartyItineraryResponse_Count_DEFAULT int64

func (p *ShowPartyItineraryResponse) GetCount() (v int64) {
	if !p.IsSetCount() {
		return ShowPartyItineraryResponse_Count_DEFAULT
	}
	return *p.Count
}

var ShowPartyItineraryResponse_Itineraries_DEFAULT []*base.Itinerary

func (p *ShowPartyItineraryResponse) GetItineraries() (v []*base.Itinerary) {
	if !p.IsSetItineraries() {
		return ShowPartyItineraryResponse_Itineraries_DEFAULT
	}
	return p.Itineraries
}
func (p *ShowPartyItineraryResponse) SetBase(val *base.BaseResp) {
	p.Base = val
}
func (p *ShowPartyItineraryResponse) SetCount(val *int64) {
	p.Count = val
}
func (p *ShowPartyItineraryResponse) SetItineraries(val []*base.Itinerary) {
	p.Itineraries = val
}

var fieldIDToName_ShowPartyItineraryResponse = map[int16]string{
	1: "base",
	2: "count",
	3: "itineraries",
}

func (p *ShowPartyItineraryResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *ShowPartyItineraryResponse) IsSetCount() bool {
	return p.Count != nil
}

func (p *ShowPartyItineraryResponse) IsSetItineraries() bool {
	return p.Itineraries != nil
}

func (p *ShowPartyItineraryResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ShowPartyItineraryResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ShowPartyItineraryResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Base = base.NewBaseResp()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}
func (p *ShowPartyItineraryResponse) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Count = &v
	}
	return nil
}
func (p *ShowPartyItineraryResponse) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Itineraries = make([]*base.Itinerary, 0, size)
	for i := 0; i < size; i++ {
		_elem := base.NewItinerary()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Itineraries = append(p.Itineraries, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ShowPartyItineraryResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ShowPartyItineraryResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ShowPartyItineraryResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ShowPartyItineraryResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCount() {
		if err = oprot.WriteFieldBegin("count", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Count); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ShowPartyItineraryResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetItineraries() {
		if err = oprot.WriteFieldBegin("itineraries", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Itineraries)); err != nil {
			return err
		}
		for _, v := range p.Itineraries {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ShowPartyItineraryResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ShowPartyItineraryResponse(%+v)", *p)

}

func (p *ShowPartyItineraryResponse) DeepEqual(ano *ShowPartyItineraryResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.Count) {
		return false
	}
	if !p.Field3DeepEqual(ano.Itineraries) {
		return false
	}
	return true
}

func (p *ShowPartyItineraryResponse) Field1DeepEqual(src *base.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ShowPartyItineraryResponse) Field2DeepEqual(src *int64) bool {

	if p.Count == src {
		return true
	} else if p.Count == nil || src == nil {
		return false
	}
	if *p.Count != *src {
		return false
	}
	return true
}
func (p *ShowPartyItineraryResponse) Field3DeepEqual(src []*base.Itinerary) bool {

	if len(p.Itineraries) != len(src) {
		return false
	}
	for i, v := range p.Itineraries {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type ChangeSequenceRequest struct {
	ItineraryIdList []int64 `thrift:"itinerary_id_list,1" frugal:"1,default,list<i64>" json:"itinerary_id_list"`
	SequenceList    []int64 `thrift:"sequence_list,2" frugal:"2,default,list<i64>" json:"sequence_list"`
	UserId          int64   `thrift:"user_id,3" frugal:"3,default,i64" json:"user_id"`
}

func NewChangeSequenceRequest() *ChangeSequenceRequest {
	return &ChangeSequenceRequest{}
}

func (p *ChangeSequenceRequest) InitDefault() {
	*p = ChangeSequenceRequest{}
}

func (p *ChangeSequenceRequest) GetItineraryIdList() (v []int64) {
	return p.ItineraryIdList
}

func (p *ChangeSequenceRequest) GetSequenceList() (v []int64) {
	return p.SequenceList
}

func (p *ChangeSequenceRequest) GetUserId() (v int64) {
	return p.UserId
}
func (p *ChangeSequenceRequest) SetItineraryIdList(val []int64) {
	p.ItineraryIdList = val
}
func (p *ChangeSequenceRequest) SetSequenceList(val []int64) {
	p.SequenceList = val
}
func (p *ChangeSequenceRequest) SetUserId(val int64) {
	p.UserId = val
}

var fieldIDToName_ChangeSequenceRequest = map[int16]string{
	1: "itinerary_id_list",
	2: "sequence_list",
	3: "user_id",
}

func (p *ChangeSequenceRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ChangeSequenceRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ChangeSequenceRequest) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.ItineraryIdList = make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.ItineraryIdList = append(p.ItineraryIdList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}
func (p *ChangeSequenceRequest) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.SequenceList = make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.SequenceList = append(p.SequenceList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}
func (p *ChangeSequenceRequest) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.UserId = v
	}
	return nil
}

func (p *ChangeSequenceRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ChangeSequenceRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ChangeSequenceRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("itinerary_id_list", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.ItineraryIdList)); err != nil {
		return err
	}
	for _, v := range p.ItineraryIdList {
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ChangeSequenceRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("sequence_list", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.SequenceList)); err != nil {
		return err
	}
	for _, v := range p.SequenceList {
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ChangeSequenceRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ChangeSequenceRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChangeSequenceRequest(%+v)", *p)

}

func (p *ChangeSequenceRequest) DeepEqual(ano *ChangeSequenceRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ItineraryIdList) {
		return false
	}
	if !p.Field2DeepEqual(ano.SequenceList) {
		return false
	}
	if !p.Field3DeepEqual(ano.UserId) {
		return false
	}
	return true
}

func (p *ChangeSequenceRequest) Field1DeepEqual(src []int64) bool {

	if len(p.ItineraryIdList) != len(src) {
		return false
	}
	for i, v := range p.ItineraryIdList {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *ChangeSequenceRequest) Field2DeepEqual(src []int64) bool {

	if len(p.SequenceList) != len(src) {
		return false
	}
	for i, v := range p.SequenceList {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *ChangeSequenceRequest) Field3DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}

type ChangeSequenceResponse struct {
	Base *base.BaseResp `thrift:"base,1" frugal:"1,default,base.BaseResp" json:"base"`
}

func NewChangeSequenceResponse() *ChangeSequenceResponse {
	return &ChangeSequenceResponse{}
}

func (p *ChangeSequenceResponse) InitDefault() {
	*p = ChangeSequenceResponse{}
}

var ChangeSequenceResponse_Base_DEFAULT *base.BaseResp

func (p *ChangeSequenceResponse) GetBase() (v *base.BaseResp) {
	if !p.IsSetBase() {
		return ChangeSequenceResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *ChangeSequenceResponse) SetBase(val *base.BaseResp) {
	p.Base = val
}

var fieldIDToName_ChangeSequenceResponse = map[int16]string{
	1: "base",
}

func (p *ChangeSequenceResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *ChangeSequenceResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ChangeSequenceResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ChangeSequenceResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Base = base.NewBaseResp()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ChangeSequenceResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ChangeSequenceResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ChangeSequenceResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ChangeSequenceResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChangeSequenceResponse(%+v)", *p)

}

func (p *ChangeSequenceResponse) DeepEqual(ano *ChangeSequenceResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ChangeSequenceResponse) Field1DeepEqual(src *base.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type MergeItineraryRequest struct {
	PartyId     int64 `thrift:"party_id,1" frugal:"1,default,i64" json:"party_id"`
	ItineraryId int64 `thrift:"itinerary_id,2" frugal:"2,default,i64" json:"itinerary_id"`
	UserId      int64 `thrift:"user_id,3" frugal:"3,default,i64" json:"user_id"`
}

func NewMergeItineraryRequest() *MergeItineraryRequest {
	return &MergeItineraryRequest{}
}

func (p *MergeItineraryRequest) InitDefault() {
	*p = MergeItineraryRequest{}
}

func (p *MergeItineraryRequest) GetPartyId() (v int64) {
	return p.PartyId
}

func (p *MergeItineraryRequest) GetItineraryId() (v int64) {
	return p.ItineraryId
}

func (p *MergeItineraryRequest) GetUserId() (v int64) {
	return p.UserId
}
func (p *MergeItineraryRequest) SetPartyId(val int64) {
	p.PartyId = val
}
func (p *MergeItineraryRequest) SetItineraryId(val int64) {
	p.ItineraryId = val
}
func (p *MergeItineraryRequest) SetUserId(val int64) {
	p.UserId = val
}

var fieldIDToName_MergeItineraryRequest = map[int16]string{
	1: "party_id",
	2: "itinerary_id",
	3: "user_id",
}

func (p *MergeItineraryRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MergeItineraryRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MergeItineraryRequest) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.PartyId = v
	}
	return nil
}
func (p *MergeItineraryRequest) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.ItineraryId = v
	}
	return nil
}
func (p *MergeItineraryRequest) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.UserId = v
	}
	return nil
}

func (p *MergeItineraryRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MergeItineraryRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MergeItineraryRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("party_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PartyId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MergeItineraryRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("itinerary_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ItineraryId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *MergeItineraryRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *MergeItineraryRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MergeItineraryRequest(%+v)", *p)

}

func (p *MergeItineraryRequest) DeepEqual(ano *MergeItineraryRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PartyId) {
		return false
	}
	if !p.Field2DeepEqual(ano.ItineraryId) {
		return false
	}
	if !p.Field3DeepEqual(ano.UserId) {
		return false
	}
	return true
}

func (p *MergeItineraryRequest) Field1DeepEqual(src int64) bool {

	if p.PartyId != src {
		return false
	}
	return true
}
func (p *MergeItineraryRequest) Field2DeepEqual(src int64) bool {

	if p.ItineraryId != src {
		return false
	}
	return true
}
func (p *MergeItineraryRequest) Field3DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}

type MergeItineraryResponse struct {
	Base *base.BaseResp `thrift:"base,1" frugal:"1,default,base.BaseResp" json:"base"`
}

func NewMergeItineraryResponse() *MergeItineraryResponse {
	return &MergeItineraryResponse{}
}

func (p *MergeItineraryResponse) InitDefault() {
	*p = MergeItineraryResponse{}
}

var MergeItineraryResponse_Base_DEFAULT *base.BaseResp

func (p *MergeItineraryResponse) GetBase() (v *base.BaseResp) {
	if !p.IsSetBase() {
		return MergeItineraryResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *MergeItineraryResponse) SetBase(val *base.BaseResp) {
	p.Base = val
}

var fieldIDToName_MergeItineraryResponse = map[int16]string{
	1: "base",
}

func (p *MergeItineraryResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *MergeItineraryResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MergeItineraryResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MergeItineraryResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Base = base.NewBaseResp()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MergeItineraryResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MergeItineraryResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MergeItineraryResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MergeItineraryResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MergeItineraryResponse(%+v)", *p)

}

func (p *MergeItineraryResponse) DeepEqual(ano *MergeItineraryResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *MergeItineraryResponse) Field1DeepEqual(src *base.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ItineraryHandler interface {
	CreateItinerary(ctx context.Context, req *CreateItineraryRequest) (r *CreateItineraryResponse, err error)

	GetItineraryInfo(ctx context.Context, req *GetItineraryInfoRequest) (r *GetItineraryInfoResponse, err error)

	ShowPartyItinerary(ctx context.Context, req *ShowPartyItineraryRequest) (r *ShowPartyItineraryResponse, err error)

	ChangeSequence(ctx context.Context, req *ChangeSequenceRequest) (r *ChangeSequenceResponse, err error)

	MergeItinerary(ctx context.Context, req *MergeItineraryRequest) (r *MergeItineraryResponse, err error)
}

type ItineraryHandlerClient struct {
	c thrift.TClient
}

func NewItineraryHandlerClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ItineraryHandlerClient {
	return &ItineraryHandlerClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewItineraryHandlerClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ItineraryHandlerClient {
	return &ItineraryHandlerClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewItineraryHandlerClient(c thrift.TClient) *ItineraryHandlerClient {
	return &ItineraryHandlerClient{
		c: c,
	}
}

func (p *ItineraryHandlerClient) Client_() thrift.TClient {
	return p.c
}

func (p *ItineraryHandlerClient) CreateItinerary(ctx context.Context, req *CreateItineraryRequest) (r *CreateItineraryResponse, err error) {
	var _args ItineraryHandlerCreateItineraryArgs
	_args.Req = req
	var _result ItineraryHandlerCreateItineraryResult
	if err = p.Client_().Call(ctx, "CreateItinerary", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ItineraryHandlerClient) GetItineraryInfo(ctx context.Context, req *GetItineraryInfoRequest) (r *GetItineraryInfoResponse, err error) {
	var _args ItineraryHandlerGetItineraryInfoArgs
	_args.Req = req
	var _result ItineraryHandlerGetItineraryInfoResult
	if err = p.Client_().Call(ctx, "GetItineraryInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ItineraryHandlerClient) ShowPartyItinerary(ctx context.Context, req *ShowPartyItineraryRequest) (r *ShowPartyItineraryResponse, err error) {
	var _args ItineraryHandlerShowPartyItineraryArgs
	_args.Req = req
	var _result ItineraryHandlerShowPartyItineraryResult
	if err = p.Client_().Call(ctx, "ShowPartyItinerary", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ItineraryHandlerClient) ChangeSequence(ctx context.Context, req *ChangeSequenceRequest) (r *ChangeSequenceResponse, err error) {
	var _args ItineraryHandlerChangeSequenceArgs
	_args.Req = req
	var _result ItineraryHandlerChangeSequenceResult
	if err = p.Client_().Call(ctx, "ChangeSequence", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ItineraryHandlerClient) MergeItinerary(ctx context.Context, req *MergeItineraryRequest) (r *MergeItineraryResponse, err error) {
	var _args ItineraryHandlerMergeItineraryArgs
	_args.Req = req
	var _result ItineraryHandlerMergeItineraryResult
	if err = p.Client_().Call(ctx, "MergeItinerary", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type ItineraryHandlerProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      ItineraryHandler
}

func (p *ItineraryHandlerProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *ItineraryHandlerProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *ItineraryHandlerProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewItineraryHandlerProcessor(handler ItineraryHandler) *ItineraryHandlerProcessor {
	self := &ItineraryHandlerProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("CreateItinerary", &itineraryHandlerProcessorCreateItinerary{handler: handler})
	self.AddToProcessorMap("GetItineraryInfo", &itineraryHandlerProcessorGetItineraryInfo{handler: handler})
	self.AddToProcessorMap("ShowPartyItinerary", &itineraryHandlerProcessorShowPartyItinerary{handler: handler})
	self.AddToProcessorMap("ChangeSequence", &itineraryHandlerProcessorChangeSequence{handler: handler})
	self.AddToProcessorMap("MergeItinerary", &itineraryHandlerProcessorMergeItinerary{handler: handler})
	return self
}
func (p *ItineraryHandlerProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type itineraryHandlerProcessorCreateItinerary struct {
	handler ItineraryHandler
}

func (p *itineraryHandlerProcessorCreateItinerary) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ItineraryHandlerCreateItineraryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateItinerary", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ItineraryHandlerCreateItineraryResult{}
	var retval *CreateItineraryResponse
	if retval, err2 = p.handler.CreateItinerary(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateItinerary: "+err2.Error())
		oprot.WriteMessageBegin("CreateItinerary", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateItinerary", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type itineraryHandlerProcessorGetItineraryInfo struct {
	handler ItineraryHandler
}

func (p *itineraryHandlerProcessorGetItineraryInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ItineraryHandlerGetItineraryInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetItineraryInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ItineraryHandlerGetItineraryInfoResult{}
	var retval *GetItineraryInfoResponse
	if retval, err2 = p.handler.GetItineraryInfo(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetItineraryInfo: "+err2.Error())
		oprot.WriteMessageBegin("GetItineraryInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetItineraryInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type itineraryHandlerProcessorShowPartyItinerary struct {
	handler ItineraryHandler
}

func (p *itineraryHandlerProcessorShowPartyItinerary) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ItineraryHandlerShowPartyItineraryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ShowPartyItinerary", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ItineraryHandlerShowPartyItineraryResult{}
	var retval *ShowPartyItineraryResponse
	if retval, err2 = p.handler.ShowPartyItinerary(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ShowPartyItinerary: "+err2.Error())
		oprot.WriteMessageBegin("ShowPartyItinerary", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ShowPartyItinerary", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type itineraryHandlerProcessorChangeSequence struct {
	handler ItineraryHandler
}

func (p *itineraryHandlerProcessorChangeSequence) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ItineraryHandlerChangeSequenceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ChangeSequence", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ItineraryHandlerChangeSequenceResult{}
	var retval *ChangeSequenceResponse
	if retval, err2 = p.handler.ChangeSequence(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ChangeSequence: "+err2.Error())
		oprot.WriteMessageBegin("ChangeSequence", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ChangeSequence", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type itineraryHandlerProcessorMergeItinerary struct {
	handler ItineraryHandler
}

func (p *itineraryHandlerProcessorMergeItinerary) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ItineraryHandlerMergeItineraryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("MergeItinerary", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ItineraryHandlerMergeItineraryResult{}
	var retval *MergeItineraryResponse
	if retval, err2 = p.handler.MergeItinerary(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing MergeItinerary: "+err2.Error())
		oprot.WriteMessageBegin("MergeItinerary", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("MergeItinerary", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type ItineraryHandlerCreateItineraryArgs struct {
	Req *CreateItineraryRequest `thrift:"req,1" frugal:"1,default,CreateItineraryRequest" json:"req"`
}

func NewItineraryHandlerCreateItineraryArgs() *ItineraryHandlerCreateItineraryArgs {
	return &ItineraryHandlerCreateItineraryArgs{}
}

func (p *ItineraryHandlerCreateItineraryArgs) InitDefault() {
	*p = ItineraryHandlerCreateItineraryArgs{}
}

var ItineraryHandlerCreateItineraryArgs_Req_DEFAULT *CreateItineraryRequest

func (p *ItineraryHandlerCreateItineraryArgs) GetReq() (v *CreateItineraryRequest) {
	if !p.IsSetReq() {
		return ItineraryHandlerCreateItineraryArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ItineraryHandlerCreateItineraryArgs) SetReq(val *CreateItineraryRequest) {
	p.Req = val
}

var fieldIDToName_ItineraryHandlerCreateItineraryArgs = map[int16]string{
	1: "req",
}

func (p *ItineraryHandlerCreateItineraryArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ItineraryHandlerCreateItineraryArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ItineraryHandlerCreateItineraryArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ItineraryHandlerCreateItineraryArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewCreateItineraryRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ItineraryHandlerCreateItineraryArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateItinerary_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ItineraryHandlerCreateItineraryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ItineraryHandlerCreateItineraryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ItineraryHandlerCreateItineraryArgs(%+v)", *p)

}

func (p *ItineraryHandlerCreateItineraryArgs) DeepEqual(ano *ItineraryHandlerCreateItineraryArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ItineraryHandlerCreateItineraryArgs) Field1DeepEqual(src *CreateItineraryRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ItineraryHandlerCreateItineraryResult struct {
	Success *CreateItineraryResponse `thrift:"success,0,optional" frugal:"0,optional,CreateItineraryResponse" json:"success,omitempty"`
}

func NewItineraryHandlerCreateItineraryResult() *ItineraryHandlerCreateItineraryResult {
	return &ItineraryHandlerCreateItineraryResult{}
}

func (p *ItineraryHandlerCreateItineraryResult) InitDefault() {
	*p = ItineraryHandlerCreateItineraryResult{}
}

var ItineraryHandlerCreateItineraryResult_Success_DEFAULT *CreateItineraryResponse

func (p *ItineraryHandlerCreateItineraryResult) GetSuccess() (v *CreateItineraryResponse) {
	if !p.IsSetSuccess() {
		return ItineraryHandlerCreateItineraryResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ItineraryHandlerCreateItineraryResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateItineraryResponse)
}

var fieldIDToName_ItineraryHandlerCreateItineraryResult = map[int16]string{
	0: "success",
}

func (p *ItineraryHandlerCreateItineraryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ItineraryHandlerCreateItineraryResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ItineraryHandlerCreateItineraryResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ItineraryHandlerCreateItineraryResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewCreateItineraryResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ItineraryHandlerCreateItineraryResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateItinerary_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ItineraryHandlerCreateItineraryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ItineraryHandlerCreateItineraryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ItineraryHandlerCreateItineraryResult(%+v)", *p)

}

func (p *ItineraryHandlerCreateItineraryResult) DeepEqual(ano *ItineraryHandlerCreateItineraryResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ItineraryHandlerCreateItineraryResult) Field0DeepEqual(src *CreateItineraryResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type ItineraryHandlerGetItineraryInfoArgs struct {
	Req *GetItineraryInfoRequest `thrift:"req,1" frugal:"1,default,GetItineraryInfoRequest" json:"req"`
}

func NewItineraryHandlerGetItineraryInfoArgs() *ItineraryHandlerGetItineraryInfoArgs {
	return &ItineraryHandlerGetItineraryInfoArgs{}
}

func (p *ItineraryHandlerGetItineraryInfoArgs) InitDefault() {
	*p = ItineraryHandlerGetItineraryInfoArgs{}
}

var ItineraryHandlerGetItineraryInfoArgs_Req_DEFAULT *GetItineraryInfoRequest

func (p *ItineraryHandlerGetItineraryInfoArgs) GetReq() (v *GetItineraryInfoRequest) {
	if !p.IsSetReq() {
		return ItineraryHandlerGetItineraryInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ItineraryHandlerGetItineraryInfoArgs) SetReq(val *GetItineraryInfoRequest) {
	p.Req = val
}

var fieldIDToName_ItineraryHandlerGetItineraryInfoArgs = map[int16]string{
	1: "req",
}

func (p *ItineraryHandlerGetItineraryInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ItineraryHandlerGetItineraryInfoArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ItineraryHandlerGetItineraryInfoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ItineraryHandlerGetItineraryInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetItineraryInfoRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ItineraryHandlerGetItineraryInfoArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetItineraryInfo_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ItineraryHandlerGetItineraryInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ItineraryHandlerGetItineraryInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ItineraryHandlerGetItineraryInfoArgs(%+v)", *p)

}

func (p *ItineraryHandlerGetItineraryInfoArgs) DeepEqual(ano *ItineraryHandlerGetItineraryInfoArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ItineraryHandlerGetItineraryInfoArgs) Field1DeepEqual(src *GetItineraryInfoRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ItineraryHandlerGetItineraryInfoResult struct {
	Success *GetItineraryInfoResponse `thrift:"success,0,optional" frugal:"0,optional,GetItineraryInfoResponse" json:"success,omitempty"`
}

func NewItineraryHandlerGetItineraryInfoResult() *ItineraryHandlerGetItineraryInfoResult {
	return &ItineraryHandlerGetItineraryInfoResult{}
}

func (p *ItineraryHandlerGetItineraryInfoResult) InitDefault() {
	*p = ItineraryHandlerGetItineraryInfoResult{}
}

var ItineraryHandlerGetItineraryInfoResult_Success_DEFAULT *GetItineraryInfoResponse

func (p *ItineraryHandlerGetItineraryInfoResult) GetSuccess() (v *GetItineraryInfoResponse) {
	if !p.IsSetSuccess() {
		return ItineraryHandlerGetItineraryInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ItineraryHandlerGetItineraryInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetItineraryInfoResponse)
}

var fieldIDToName_ItineraryHandlerGetItineraryInfoResult = map[int16]string{
	0: "success",
}

func (p *ItineraryHandlerGetItineraryInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ItineraryHandlerGetItineraryInfoResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ItineraryHandlerGetItineraryInfoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ItineraryHandlerGetItineraryInfoResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetItineraryInfoResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ItineraryHandlerGetItineraryInfoResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetItineraryInfo_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ItineraryHandlerGetItineraryInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ItineraryHandlerGetItineraryInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ItineraryHandlerGetItineraryInfoResult(%+v)", *p)

}

func (p *ItineraryHandlerGetItineraryInfoResult) DeepEqual(ano *ItineraryHandlerGetItineraryInfoResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ItineraryHandlerGetItineraryInfoResult) Field0DeepEqual(src *GetItineraryInfoResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type ItineraryHandlerShowPartyItineraryArgs struct {
	Req *ShowPartyItineraryRequest `thrift:"req,1" frugal:"1,default,ShowPartyItineraryRequest" json:"req"`
}

func NewItineraryHandlerShowPartyItineraryArgs() *ItineraryHandlerShowPartyItineraryArgs {
	return &ItineraryHandlerShowPartyItineraryArgs{}
}

func (p *ItineraryHandlerShowPartyItineraryArgs) InitDefault() {
	*p = ItineraryHandlerShowPartyItineraryArgs{}
}

var ItineraryHandlerShowPartyItineraryArgs_Req_DEFAULT *ShowPartyItineraryRequest

func (p *ItineraryHandlerShowPartyItineraryArgs) GetReq() (v *ShowPartyItineraryRequest) {
	if !p.IsSetReq() {
		return ItineraryHandlerShowPartyItineraryArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ItineraryHandlerShowPartyItineraryArgs) SetReq(val *ShowPartyItineraryRequest) {
	p.Req = val
}

var fieldIDToName_ItineraryHandlerShowPartyItineraryArgs = map[int16]string{
	1: "req",
}

func (p *ItineraryHandlerShowPartyItineraryArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ItineraryHandlerShowPartyItineraryArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ItineraryHandlerShowPartyItineraryArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ItineraryHandlerShowPartyItineraryArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewShowPartyItineraryRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ItineraryHandlerShowPartyItineraryArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ShowPartyItinerary_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ItineraryHandlerShowPartyItineraryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ItineraryHandlerShowPartyItineraryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ItineraryHandlerShowPartyItineraryArgs(%+v)", *p)

}

func (p *ItineraryHandlerShowPartyItineraryArgs) DeepEqual(ano *ItineraryHandlerShowPartyItineraryArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ItineraryHandlerShowPartyItineraryArgs) Field1DeepEqual(src *ShowPartyItineraryRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ItineraryHandlerShowPartyItineraryResult struct {
	Success *ShowPartyItineraryResponse `thrift:"success,0,optional" frugal:"0,optional,ShowPartyItineraryResponse" json:"success,omitempty"`
}

func NewItineraryHandlerShowPartyItineraryResult() *ItineraryHandlerShowPartyItineraryResult {
	return &ItineraryHandlerShowPartyItineraryResult{}
}

func (p *ItineraryHandlerShowPartyItineraryResult) InitDefault() {
	*p = ItineraryHandlerShowPartyItineraryResult{}
}

var ItineraryHandlerShowPartyItineraryResult_Success_DEFAULT *ShowPartyItineraryResponse

func (p *ItineraryHandlerShowPartyItineraryResult) GetSuccess() (v *ShowPartyItineraryResponse) {
	if !p.IsSetSuccess() {
		return ItineraryHandlerShowPartyItineraryResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ItineraryHandlerShowPartyItineraryResult) SetSuccess(x interface{}) {
	p.Success = x.(*ShowPartyItineraryResponse)
}

var fieldIDToName_ItineraryHandlerShowPartyItineraryResult = map[int16]string{
	0: "success",
}

func (p *ItineraryHandlerShowPartyItineraryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ItineraryHandlerShowPartyItineraryResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ItineraryHandlerShowPartyItineraryResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ItineraryHandlerShowPartyItineraryResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewShowPartyItineraryResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ItineraryHandlerShowPartyItineraryResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ShowPartyItinerary_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ItineraryHandlerShowPartyItineraryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ItineraryHandlerShowPartyItineraryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ItineraryHandlerShowPartyItineraryResult(%+v)", *p)

}

func (p *ItineraryHandlerShowPartyItineraryResult) DeepEqual(ano *ItineraryHandlerShowPartyItineraryResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ItineraryHandlerShowPartyItineraryResult) Field0DeepEqual(src *ShowPartyItineraryResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type ItineraryHandlerChangeSequenceArgs struct {
	Req *ChangeSequenceRequest `thrift:"req,1" frugal:"1,default,ChangeSequenceRequest" json:"req"`
}

func NewItineraryHandlerChangeSequenceArgs() *ItineraryHandlerChangeSequenceArgs {
	return &ItineraryHandlerChangeSequenceArgs{}
}

func (p *ItineraryHandlerChangeSequenceArgs) InitDefault() {
	*p = ItineraryHandlerChangeSequenceArgs{}
}

var ItineraryHandlerChangeSequenceArgs_Req_DEFAULT *ChangeSequenceRequest

func (p *ItineraryHandlerChangeSequenceArgs) GetReq() (v *ChangeSequenceRequest) {
	if !p.IsSetReq() {
		return ItineraryHandlerChangeSequenceArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ItineraryHandlerChangeSequenceArgs) SetReq(val *ChangeSequenceRequest) {
	p.Req = val
}

var fieldIDToName_ItineraryHandlerChangeSequenceArgs = map[int16]string{
	1: "req",
}

func (p *ItineraryHandlerChangeSequenceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ItineraryHandlerChangeSequenceArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ItineraryHandlerChangeSequenceArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ItineraryHandlerChangeSequenceArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewChangeSequenceRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ItineraryHandlerChangeSequenceArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ChangeSequence_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ItineraryHandlerChangeSequenceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ItineraryHandlerChangeSequenceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ItineraryHandlerChangeSequenceArgs(%+v)", *p)

}

func (p *ItineraryHandlerChangeSequenceArgs) DeepEqual(ano *ItineraryHandlerChangeSequenceArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ItineraryHandlerChangeSequenceArgs) Field1DeepEqual(src *ChangeSequenceRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ItineraryHandlerChangeSequenceResult struct {
	Success *ChangeSequenceResponse `thrift:"success,0,optional" frugal:"0,optional,ChangeSequenceResponse" json:"success,omitempty"`
}

func NewItineraryHandlerChangeSequenceResult() *ItineraryHandlerChangeSequenceResult {
	return &ItineraryHandlerChangeSequenceResult{}
}

func (p *ItineraryHandlerChangeSequenceResult) InitDefault() {
	*p = ItineraryHandlerChangeSequenceResult{}
}

var ItineraryHandlerChangeSequenceResult_Success_DEFAULT *ChangeSequenceResponse

func (p *ItineraryHandlerChangeSequenceResult) GetSuccess() (v *ChangeSequenceResponse) {
	if !p.IsSetSuccess() {
		return ItineraryHandlerChangeSequenceResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ItineraryHandlerChangeSequenceResult) SetSuccess(x interface{}) {
	p.Success = x.(*ChangeSequenceResponse)
}

var fieldIDToName_ItineraryHandlerChangeSequenceResult = map[int16]string{
	0: "success",
}

func (p *ItineraryHandlerChangeSequenceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ItineraryHandlerChangeSequenceResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ItineraryHandlerChangeSequenceResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ItineraryHandlerChangeSequenceResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewChangeSequenceResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ItineraryHandlerChangeSequenceResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ChangeSequence_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ItineraryHandlerChangeSequenceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ItineraryHandlerChangeSequenceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ItineraryHandlerChangeSequenceResult(%+v)", *p)

}

func (p *ItineraryHandlerChangeSequenceResult) DeepEqual(ano *ItineraryHandlerChangeSequenceResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ItineraryHandlerChangeSequenceResult) Field0DeepEqual(src *ChangeSequenceResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type ItineraryHandlerMergeItineraryArgs struct {
	Req *MergeItineraryRequest `thrift:"req,1" frugal:"1,default,MergeItineraryRequest" json:"req"`
}

func NewItineraryHandlerMergeItineraryArgs() *ItineraryHandlerMergeItineraryArgs {
	return &ItineraryHandlerMergeItineraryArgs{}
}

func (p *ItineraryHandlerMergeItineraryArgs) InitDefault() {
	*p = ItineraryHandlerMergeItineraryArgs{}
}

var ItineraryHandlerMergeItineraryArgs_Req_DEFAULT *MergeItineraryRequest

func (p *ItineraryHandlerMergeItineraryArgs) GetReq() (v *MergeItineraryRequest) {
	if !p.IsSetReq() {
		return ItineraryHandlerMergeItineraryArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ItineraryHandlerMergeItineraryArgs) SetReq(val *MergeItineraryRequest) {
	p.Req = val
}

var fieldIDToName_ItineraryHandlerMergeItineraryArgs = map[int16]string{
	1: "req",
}

func (p *ItineraryHandlerMergeItineraryArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ItineraryHandlerMergeItineraryArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ItineraryHandlerMergeItineraryArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ItineraryHandlerMergeItineraryArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewMergeItineraryRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ItineraryHandlerMergeItineraryArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MergeItinerary_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ItineraryHandlerMergeItineraryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ItineraryHandlerMergeItineraryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ItineraryHandlerMergeItineraryArgs(%+v)", *p)

}

func (p *ItineraryHandlerMergeItineraryArgs) DeepEqual(ano *ItineraryHandlerMergeItineraryArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ItineraryHandlerMergeItineraryArgs) Field1DeepEqual(src *MergeItineraryRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ItineraryHandlerMergeItineraryResult struct {
	Success *MergeItineraryResponse `thrift:"success,0,optional" frugal:"0,optional,MergeItineraryResponse" json:"success,omitempty"`
}

func NewItineraryHandlerMergeItineraryResult() *ItineraryHandlerMergeItineraryResult {
	return &ItineraryHandlerMergeItineraryResult{}
}

func (p *ItineraryHandlerMergeItineraryResult) InitDefault() {
	*p = ItineraryHandlerMergeItineraryResult{}
}

var ItineraryHandlerMergeItineraryResult_Success_DEFAULT *MergeItineraryResponse

func (p *ItineraryHandlerMergeItineraryResult) GetSuccess() (v *MergeItineraryResponse) {
	if !p.IsSetSuccess() {
		return ItineraryHandlerMergeItineraryResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ItineraryHandlerMergeItineraryResult) SetSuccess(x interface{}) {
	p.Success = x.(*MergeItineraryResponse)
}

var fieldIDToName_ItineraryHandlerMergeItineraryResult = map[int16]string{
	0: "success",
}

func (p *ItineraryHandlerMergeItineraryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ItineraryHandlerMergeItineraryResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ItineraryHandlerMergeItineraryResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ItineraryHandlerMergeItineraryResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewMergeItineraryResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ItineraryHandlerMergeItineraryResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MergeItinerary_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ItineraryHandlerMergeItineraryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ItineraryHandlerMergeItineraryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ItineraryHandlerMergeItineraryResult(%+v)", *p)

}

func (p *ItineraryHandlerMergeItineraryResult) DeepEqual(ano *ItineraryHandlerMergeItineraryResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ItineraryHandlerMergeItineraryResult) Field0DeepEqual(src *MergeItineraryResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
