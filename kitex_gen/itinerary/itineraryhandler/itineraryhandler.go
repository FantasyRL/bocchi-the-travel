// Code generated by Kitex v0.9.1. DO NOT EDIT.

package itineraryhandler

import (
	itinerary "bocchi/kitex_gen/itinerary"
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateItinerary": kitex.NewMethodInfo(
		createItineraryHandler,
		newItineraryHandlerCreateItineraryArgs,
		newItineraryHandlerCreateItineraryResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetItineraryInfo": kitex.NewMethodInfo(
		getItineraryInfoHandler,
		newItineraryHandlerGetItineraryInfoArgs,
		newItineraryHandlerGetItineraryInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ShowPartyItinerary": kitex.NewMethodInfo(
		showPartyItineraryHandler,
		newItineraryHandlerShowPartyItineraryArgs,
		newItineraryHandlerShowPartyItineraryResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ChangeSequence": kitex.NewMethodInfo(
		changeSequenceHandler,
		newItineraryHandlerChangeSequenceArgs,
		newItineraryHandlerChangeSequenceResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"MergeItinerary": kitex.NewMethodInfo(
		mergeItineraryHandler,
		newItineraryHandlerMergeItineraryArgs,
		newItineraryHandlerMergeItineraryResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	itineraryHandlerServiceInfo                = NewServiceInfo()
	itineraryHandlerServiceInfoForClient       = NewServiceInfoForClient()
	itineraryHandlerServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return itineraryHandlerServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return itineraryHandlerServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return itineraryHandlerServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "ItineraryHandler"
	handlerType := (*itinerary.ItineraryHandler)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "itinerary",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func createItineraryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*itinerary.ItineraryHandlerCreateItineraryArgs)
	realResult := result.(*itinerary.ItineraryHandlerCreateItineraryResult)
	success, err := handler.(itinerary.ItineraryHandler).CreateItinerary(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newItineraryHandlerCreateItineraryArgs() interface{} {
	return itinerary.NewItineraryHandlerCreateItineraryArgs()
}

func newItineraryHandlerCreateItineraryResult() interface{} {
	return itinerary.NewItineraryHandlerCreateItineraryResult()
}

func getItineraryInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*itinerary.ItineraryHandlerGetItineraryInfoArgs)
	realResult := result.(*itinerary.ItineraryHandlerGetItineraryInfoResult)
	success, err := handler.(itinerary.ItineraryHandler).GetItineraryInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newItineraryHandlerGetItineraryInfoArgs() interface{} {
	return itinerary.NewItineraryHandlerGetItineraryInfoArgs()
}

func newItineraryHandlerGetItineraryInfoResult() interface{} {
	return itinerary.NewItineraryHandlerGetItineraryInfoResult()
}

func showPartyItineraryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*itinerary.ItineraryHandlerShowPartyItineraryArgs)
	realResult := result.(*itinerary.ItineraryHandlerShowPartyItineraryResult)
	success, err := handler.(itinerary.ItineraryHandler).ShowPartyItinerary(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newItineraryHandlerShowPartyItineraryArgs() interface{} {
	return itinerary.NewItineraryHandlerShowPartyItineraryArgs()
}

func newItineraryHandlerShowPartyItineraryResult() interface{} {
	return itinerary.NewItineraryHandlerShowPartyItineraryResult()
}

func changeSequenceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*itinerary.ItineraryHandlerChangeSequenceArgs)
	realResult := result.(*itinerary.ItineraryHandlerChangeSequenceResult)
	success, err := handler.(itinerary.ItineraryHandler).ChangeSequence(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newItineraryHandlerChangeSequenceArgs() interface{} {
	return itinerary.NewItineraryHandlerChangeSequenceArgs()
}

func newItineraryHandlerChangeSequenceResult() interface{} {
	return itinerary.NewItineraryHandlerChangeSequenceResult()
}

func mergeItineraryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*itinerary.ItineraryHandlerMergeItineraryArgs)
	realResult := result.(*itinerary.ItineraryHandlerMergeItineraryResult)
	success, err := handler.(itinerary.ItineraryHandler).MergeItinerary(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newItineraryHandlerMergeItineraryArgs() interface{} {
	return itinerary.NewItineraryHandlerMergeItineraryArgs()
}

func newItineraryHandlerMergeItineraryResult() interface{} {
	return itinerary.NewItineraryHandlerMergeItineraryResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateItinerary(ctx context.Context, req *itinerary.CreateItineraryRequest) (r *itinerary.CreateItineraryResponse, err error) {
	var _args itinerary.ItineraryHandlerCreateItineraryArgs
	_args.Req = req
	var _result itinerary.ItineraryHandlerCreateItineraryResult
	if err = p.c.Call(ctx, "CreateItinerary", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetItineraryInfo(ctx context.Context, req *itinerary.GetItineraryInfoRequest) (r *itinerary.GetItineraryInfoResponse, err error) {
	var _args itinerary.ItineraryHandlerGetItineraryInfoArgs
	_args.Req = req
	var _result itinerary.ItineraryHandlerGetItineraryInfoResult
	if err = p.c.Call(ctx, "GetItineraryInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ShowPartyItinerary(ctx context.Context, req *itinerary.ShowPartyItineraryRequest) (r *itinerary.ShowPartyItineraryResponse, err error) {
	var _args itinerary.ItineraryHandlerShowPartyItineraryArgs
	_args.Req = req
	var _result itinerary.ItineraryHandlerShowPartyItineraryResult
	if err = p.c.Call(ctx, "ShowPartyItinerary", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ChangeSequence(ctx context.Context, req *itinerary.ChangeSequenceRequest) (r *itinerary.ChangeSequenceResponse, err error) {
	var _args itinerary.ItineraryHandlerChangeSequenceArgs
	_args.Req = req
	var _result itinerary.ItineraryHandlerChangeSequenceResult
	if err = p.c.Call(ctx, "ChangeSequence", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MergeItinerary(ctx context.Context, req *itinerary.MergeItineraryRequest) (r *itinerary.MergeItineraryResponse, err error) {
	var _args itinerary.ItineraryHandlerMergeItineraryArgs
	_args.Req = req
	var _result itinerary.ItineraryHandlerMergeItineraryResult
	if err = p.c.Call(ctx, "MergeItinerary", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
