// Code generated by thriftgo (0.3.6). DO NOT EDIT.

package party

import (
	"bocchi/kitex_gen/base"
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

type CreatePartyRequest struct {
	FounderId int64  `thrift:"founder_id,1" frugal:"1,default,i64" json:"founder_id"`
	Title     string `thrift:"title,2" frugal:"2,default,string" json:"title"`
	Content   string `thrift:"content,3" frugal:"3,default,string" json:"content"`
	Type      int64  `thrift:"type,4" frugal:"4,default,i64" json:"type"`
	Province  string `thrift:"province,5" frugal:"5,default,string" json:"province"`
	City      string `thrift:"city,6" frugal:"6,default,string" json:"city"`
	StartTime string `thrift:"start_time,7" frugal:"7,default,string" json:"start_time"`
	EndTime   string `thrift:"end_time,8" frugal:"8,default,string" json:"end_time"`
}

func NewCreatePartyRequest() *CreatePartyRequest {
	return &CreatePartyRequest{}
}

func (p *CreatePartyRequest) InitDefault() {
	*p = CreatePartyRequest{}
}

func (p *CreatePartyRequest) GetFounderId() (v int64) {
	return p.FounderId
}

func (p *CreatePartyRequest) GetTitle() (v string) {
	return p.Title
}

func (p *CreatePartyRequest) GetContent() (v string) {
	return p.Content
}

func (p *CreatePartyRequest) GetType() (v int64) {
	return p.Type
}

func (p *CreatePartyRequest) GetProvince() (v string) {
	return p.Province
}

func (p *CreatePartyRequest) GetCity() (v string) {
	return p.City
}

func (p *CreatePartyRequest) GetStartTime() (v string) {
	return p.StartTime
}

func (p *CreatePartyRequest) GetEndTime() (v string) {
	return p.EndTime
}
func (p *CreatePartyRequest) SetFounderId(val int64) {
	p.FounderId = val
}
func (p *CreatePartyRequest) SetTitle(val string) {
	p.Title = val
}
func (p *CreatePartyRequest) SetContent(val string) {
	p.Content = val
}
func (p *CreatePartyRequest) SetType(val int64) {
	p.Type = val
}
func (p *CreatePartyRequest) SetProvince(val string) {
	p.Province = val
}
func (p *CreatePartyRequest) SetCity(val string) {
	p.City = val
}
func (p *CreatePartyRequest) SetStartTime(val string) {
	p.StartTime = val
}
func (p *CreatePartyRequest) SetEndTime(val string) {
	p.EndTime = val
}

var fieldIDToName_CreatePartyRequest = map[int16]string{
	1: "founder_id",
	2: "title",
	3: "content",
	4: "type",
	5: "province",
	6: "city",
	7: "start_time",
	8: "end_time",
}

func (p *CreatePartyRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreatePartyRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreatePartyRequest) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.FounderId = v
	}
	return nil
}
func (p *CreatePartyRequest) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Title = v
	}
	return nil
}
func (p *CreatePartyRequest) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Content = v
	}
	return nil
}
func (p *CreatePartyRequest) ReadField4(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Type = v
	}
	return nil
}
func (p *CreatePartyRequest) ReadField5(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Province = v
	}
	return nil
}
func (p *CreatePartyRequest) ReadField6(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.City = v
	}
	return nil
}
func (p *CreatePartyRequest) ReadField7(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.StartTime = v
	}
	return nil
}
func (p *CreatePartyRequest) ReadField8(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.EndTime = v
	}
	return nil
}

func (p *CreatePartyRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreatePartyRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreatePartyRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("founder_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.FounderId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreatePartyRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("title", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Title); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreatePartyRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("content", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Content); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CreatePartyRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("type", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Type); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CreatePartyRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("province", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Province); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *CreatePartyRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("city", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.City); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *CreatePartyRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("start_time", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.StartTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *CreatePartyRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("end_time", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.EndTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *CreatePartyRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreatePartyRequest(%+v)", *p)

}

func (p *CreatePartyRequest) DeepEqual(ano *CreatePartyRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.FounderId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Title) {
		return false
	}
	if !p.Field3DeepEqual(ano.Content) {
		return false
	}
	if !p.Field4DeepEqual(ano.Type) {
		return false
	}
	if !p.Field5DeepEqual(ano.Province) {
		return false
	}
	if !p.Field6DeepEqual(ano.City) {
		return false
	}
	if !p.Field7DeepEqual(ano.StartTime) {
		return false
	}
	if !p.Field8DeepEqual(ano.EndTime) {
		return false
	}
	return true
}

func (p *CreatePartyRequest) Field1DeepEqual(src int64) bool {

	if p.FounderId != src {
		return false
	}
	return true
}
func (p *CreatePartyRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Title, src) != 0 {
		return false
	}
	return true
}
func (p *CreatePartyRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Content, src) != 0 {
		return false
	}
	return true
}
func (p *CreatePartyRequest) Field4DeepEqual(src int64) bool {

	if p.Type != src {
		return false
	}
	return true
}
func (p *CreatePartyRequest) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Province, src) != 0 {
		return false
	}
	return true
}
func (p *CreatePartyRequest) Field6DeepEqual(src string) bool {

	if strings.Compare(p.City, src) != 0 {
		return false
	}
	return true
}
func (p *CreatePartyRequest) Field7DeepEqual(src string) bool {

	if strings.Compare(p.StartTime, src) != 0 {
		return false
	}
	return true
}
func (p *CreatePartyRequest) Field8DeepEqual(src string) bool {

	if strings.Compare(p.EndTime, src) != 0 {
		return false
	}
	return true
}

type CreatePartyResponse struct {
	Base *base.BaseResp `thrift:"base,1" frugal:"1,default,base.BaseResp" json:"base"`
}

func NewCreatePartyResponse() *CreatePartyResponse {
	return &CreatePartyResponse{}
}

func (p *CreatePartyResponse) InitDefault() {
	*p = CreatePartyResponse{}
}

var CreatePartyResponse_Base_DEFAULT *base.BaseResp

func (p *CreatePartyResponse) GetBase() (v *base.BaseResp) {
	if !p.IsSetBase() {
		return CreatePartyResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *CreatePartyResponse) SetBase(val *base.BaseResp) {
	p.Base = val
}

var fieldIDToName_CreatePartyResponse = map[int16]string{
	1: "base",
}

func (p *CreatePartyResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *CreatePartyResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreatePartyResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreatePartyResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Base = base.NewBaseResp()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CreatePartyResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreatePartyResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreatePartyResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreatePartyResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreatePartyResponse(%+v)", *p)

}

func (p *CreatePartyResponse) DeepEqual(ano *CreatePartyResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *CreatePartyResponse) Field1DeepEqual(src *base.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type JoinPartyRequest struct {
	PartyId  int64 `thrift:"party_id,1" frugal:"1,default,i64" json:"party_id"`
	MemberId int64 `thrift:"member_id,2" frugal:"2,default,i64" json:"member_id"`
}

func NewJoinPartyRequest() *JoinPartyRequest {
	return &JoinPartyRequest{}
}

func (p *JoinPartyRequest) InitDefault() {
	*p = JoinPartyRequest{}
}

func (p *JoinPartyRequest) GetPartyId() (v int64) {
	return p.PartyId
}

func (p *JoinPartyRequest) GetMemberId() (v int64) {
	return p.MemberId
}
func (p *JoinPartyRequest) SetPartyId(val int64) {
	p.PartyId = val
}
func (p *JoinPartyRequest) SetMemberId(val int64) {
	p.MemberId = val
}

var fieldIDToName_JoinPartyRequest = map[int16]string{
	1: "party_id",
	2: "member_id",
}

func (p *JoinPartyRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_JoinPartyRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *JoinPartyRequest) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.PartyId = v
	}
	return nil
}
func (p *JoinPartyRequest) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.MemberId = v
	}
	return nil
}

func (p *JoinPartyRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("JoinPartyRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *JoinPartyRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("party_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PartyId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *JoinPartyRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("member_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.MemberId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *JoinPartyRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("JoinPartyRequest(%+v)", *p)

}

func (p *JoinPartyRequest) DeepEqual(ano *JoinPartyRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PartyId) {
		return false
	}
	if !p.Field2DeepEqual(ano.MemberId) {
		return false
	}
	return true
}

func (p *JoinPartyRequest) Field1DeepEqual(src int64) bool {

	if p.PartyId != src {
		return false
	}
	return true
}
func (p *JoinPartyRequest) Field2DeepEqual(src int64) bool {

	if p.MemberId != src {
		return false
	}
	return true
}

type JoinPartyResponse struct {
	Base *base.BaseResp `thrift:"base,1" frugal:"1,default,base.BaseResp" json:"base"`
}

func NewJoinPartyResponse() *JoinPartyResponse {
	return &JoinPartyResponse{}
}

func (p *JoinPartyResponse) InitDefault() {
	*p = JoinPartyResponse{}
}

var JoinPartyResponse_Base_DEFAULT *base.BaseResp

func (p *JoinPartyResponse) GetBase() (v *base.BaseResp) {
	if !p.IsSetBase() {
		return JoinPartyResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *JoinPartyResponse) SetBase(val *base.BaseResp) {
	p.Base = val
}

var fieldIDToName_JoinPartyResponse = map[int16]string{
	1: "base",
}

func (p *JoinPartyResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *JoinPartyResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_JoinPartyResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *JoinPartyResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Base = base.NewBaseResp()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *JoinPartyResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("JoinPartyResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *JoinPartyResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *JoinPartyResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("JoinPartyResponse(%+v)", *p)

}

func (p *JoinPartyResponse) DeepEqual(ano *JoinPartyResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *JoinPartyResponse) Field1DeepEqual(src *base.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ApplyListRequest struct {
	PartyId int64 `thrift:"party_id,1" frugal:"1,default,i64" json:"party_id"`
	PageNum int64 `thrift:"page_num,2" frugal:"2,default,i64" json:"page_num"`
	UserId  int64 `thrift:"user_id,3" frugal:"3,default,i64" json:"user_id"`
}

func NewApplyListRequest() *ApplyListRequest {
	return &ApplyListRequest{}
}

func (p *ApplyListRequest) InitDefault() {
	*p = ApplyListRequest{}
}

func (p *ApplyListRequest) GetPartyId() (v int64) {
	return p.PartyId
}

func (p *ApplyListRequest) GetPageNum() (v int64) {
	return p.PageNum
}

func (p *ApplyListRequest) GetUserId() (v int64) {
	return p.UserId
}
func (p *ApplyListRequest) SetPartyId(val int64) {
	p.PartyId = val
}
func (p *ApplyListRequest) SetPageNum(val int64) {
	p.PageNum = val
}
func (p *ApplyListRequest) SetUserId(val int64) {
	p.UserId = val
}

var fieldIDToName_ApplyListRequest = map[int16]string{
	1: "party_id",
	2: "page_num",
	3: "user_id",
}

func (p *ApplyListRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ApplyListRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ApplyListRequest) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.PartyId = v
	}
	return nil
}
func (p *ApplyListRequest) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.PageNum = v
	}
	return nil
}
func (p *ApplyListRequest) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.UserId = v
	}
	return nil
}

func (p *ApplyListRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ApplyListRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ApplyListRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("party_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PartyId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ApplyListRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("page_num", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PageNum); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ApplyListRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ApplyListRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ApplyListRequest(%+v)", *p)

}

func (p *ApplyListRequest) DeepEqual(ano *ApplyListRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PartyId) {
		return false
	}
	if !p.Field2DeepEqual(ano.PageNum) {
		return false
	}
	if !p.Field3DeepEqual(ano.UserId) {
		return false
	}
	return true
}

func (p *ApplyListRequest) Field1DeepEqual(src int64) bool {

	if p.PartyId != src {
		return false
	}
	return true
}
func (p *ApplyListRequest) Field2DeepEqual(src int64) bool {

	if p.PageNum != src {
		return false
	}
	return true
}
func (p *ApplyListRequest) Field3DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}

type ApplyListResponse struct {
	Base           *base.BaseResp `thrift:"base,1" frugal:"1,default,base.BaseResp" json:"base"`
	ApplicantCount *int64         `thrift:"applicant_count,2,optional" frugal:"2,optional,i64" json:"applicant_count,omitempty"`
	ApplicantList  []*base.User   `thrift:"applicant_list,3,optional" frugal:"3,optional,list<base.User>" json:"applicant_list,omitempty"`
}

func NewApplyListResponse() *ApplyListResponse {
	return &ApplyListResponse{}
}

func (p *ApplyListResponse) InitDefault() {
	*p = ApplyListResponse{}
}

var ApplyListResponse_Base_DEFAULT *base.BaseResp

func (p *ApplyListResponse) GetBase() (v *base.BaseResp) {
	if !p.IsSetBase() {
		return ApplyListResponse_Base_DEFAULT
	}
	return p.Base
}

var ApplyListResponse_ApplicantCount_DEFAULT int64

func (p *ApplyListResponse) GetApplicantCount() (v int64) {
	if !p.IsSetApplicantCount() {
		return ApplyListResponse_ApplicantCount_DEFAULT
	}
	return *p.ApplicantCount
}

var ApplyListResponse_ApplicantList_DEFAULT []*base.User

func (p *ApplyListResponse) GetApplicantList() (v []*base.User) {
	if !p.IsSetApplicantList() {
		return ApplyListResponse_ApplicantList_DEFAULT
	}
	return p.ApplicantList
}
func (p *ApplyListResponse) SetBase(val *base.BaseResp) {
	p.Base = val
}
func (p *ApplyListResponse) SetApplicantCount(val *int64) {
	p.ApplicantCount = val
}
func (p *ApplyListResponse) SetApplicantList(val []*base.User) {
	p.ApplicantList = val
}

var fieldIDToName_ApplyListResponse = map[int16]string{
	1: "base",
	2: "applicant_count",
	3: "applicant_list",
}

func (p *ApplyListResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *ApplyListResponse) IsSetApplicantCount() bool {
	return p.ApplicantCount != nil
}

func (p *ApplyListResponse) IsSetApplicantList() bool {
	return p.ApplicantList != nil
}

func (p *ApplyListResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ApplyListResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ApplyListResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Base = base.NewBaseResp()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}
func (p *ApplyListResponse) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.ApplicantCount = &v
	}
	return nil
}
func (p *ApplyListResponse) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.ApplicantList = make([]*base.User, 0, size)
	for i := 0; i < size; i++ {
		_elem := base.NewUser()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.ApplicantList = append(p.ApplicantList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ApplyListResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ApplyListResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ApplyListResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ApplyListResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetApplicantCount() {
		if err = oprot.WriteFieldBegin("applicant_count", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ApplicantCount); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ApplyListResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetApplicantList() {
		if err = oprot.WriteFieldBegin("applicant_list", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ApplicantList)); err != nil {
			return err
		}
		for _, v := range p.ApplicantList {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ApplyListResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ApplyListResponse(%+v)", *p)

}

func (p *ApplyListResponse) DeepEqual(ano *ApplyListResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.ApplicantCount) {
		return false
	}
	if !p.Field3DeepEqual(ano.ApplicantList) {
		return false
	}
	return true
}

func (p *ApplyListResponse) Field1DeepEqual(src *base.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ApplyListResponse) Field2DeepEqual(src *int64) bool {

	if p.ApplicantCount == src {
		return true
	} else if p.ApplicantCount == nil || src == nil {
		return false
	}
	if *p.ApplicantCount != *src {
		return false
	}
	return true
}
func (p *ApplyListResponse) Field3DeepEqual(src []*base.User) bool {

	if len(p.ApplicantList) != len(src) {
		return false
	}
	for i, v := range p.ApplicantList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type PermitJoinRequest struct {
	PartyId  int64 `thrift:"party_id,1" frugal:"1,default,i64" json:"party_id"`
	MemberId int64 `thrift:"member_id,2" frugal:"2,default,i64" json:"member_id"`
	UserId   int64 `thrift:"user_id,3" frugal:"3,default,i64" json:"user_id"`
}

func NewPermitJoinRequest() *PermitJoinRequest {
	return &PermitJoinRequest{}
}

func (p *PermitJoinRequest) InitDefault() {
	*p = PermitJoinRequest{}
}

func (p *PermitJoinRequest) GetPartyId() (v int64) {
	return p.PartyId
}

func (p *PermitJoinRequest) GetMemberId() (v int64) {
	return p.MemberId
}

func (p *PermitJoinRequest) GetUserId() (v int64) {
	return p.UserId
}
func (p *PermitJoinRequest) SetPartyId(val int64) {
	p.PartyId = val
}
func (p *PermitJoinRequest) SetMemberId(val int64) {
	p.MemberId = val
}
func (p *PermitJoinRequest) SetUserId(val int64) {
	p.UserId = val
}

var fieldIDToName_PermitJoinRequest = map[int16]string{
	1: "party_id",
	2: "member_id",
	3: "user_id",
}

func (p *PermitJoinRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PermitJoinRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PermitJoinRequest) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.PartyId = v
	}
	return nil
}
func (p *PermitJoinRequest) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.MemberId = v
	}
	return nil
}
func (p *PermitJoinRequest) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.UserId = v
	}
	return nil
}

func (p *PermitJoinRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PermitJoinRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PermitJoinRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("party_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PartyId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PermitJoinRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("member_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.MemberId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *PermitJoinRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *PermitJoinRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PermitJoinRequest(%+v)", *p)

}

func (p *PermitJoinRequest) DeepEqual(ano *PermitJoinRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PartyId) {
		return false
	}
	if !p.Field2DeepEqual(ano.MemberId) {
		return false
	}
	if !p.Field3DeepEqual(ano.UserId) {
		return false
	}
	return true
}

func (p *PermitJoinRequest) Field1DeepEqual(src int64) bool {

	if p.PartyId != src {
		return false
	}
	return true
}
func (p *PermitJoinRequest) Field2DeepEqual(src int64) bool {

	if p.MemberId != src {
		return false
	}
	return true
}
func (p *PermitJoinRequest) Field3DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}

type PermitJoinResponse struct {
	Base *base.BaseResp `thrift:"base,1" frugal:"1,default,base.BaseResp" json:"base"`
}

func NewPermitJoinResponse() *PermitJoinResponse {
	return &PermitJoinResponse{}
}

func (p *PermitJoinResponse) InitDefault() {
	*p = PermitJoinResponse{}
}

var PermitJoinResponse_Base_DEFAULT *base.BaseResp

func (p *PermitJoinResponse) GetBase() (v *base.BaseResp) {
	if !p.IsSetBase() {
		return PermitJoinResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *PermitJoinResponse) SetBase(val *base.BaseResp) {
	p.Base = val
}

var fieldIDToName_PermitJoinResponse = map[int16]string{
	1: "base",
}

func (p *PermitJoinResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *PermitJoinResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PermitJoinResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PermitJoinResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Base = base.NewBaseResp()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PermitJoinResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PermitJoinResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PermitJoinResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PermitJoinResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PermitJoinResponse(%+v)", *p)

}

func (p *PermitJoinResponse) DeepEqual(ano *PermitJoinResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *PermitJoinResponse) Field1DeepEqual(src *base.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type GetPartyMembersRequest struct {
	PartyId int64 `thrift:"party_id,1" frugal:"1,default,i64" json:"party_id"`
	PageNum int64 `thrift:"page_num,2" frugal:"2,default,i64" json:"page_num"`
}

func NewGetPartyMembersRequest() *GetPartyMembersRequest {
	return &GetPartyMembersRequest{}
}

func (p *GetPartyMembersRequest) InitDefault() {
	*p = GetPartyMembersRequest{}
}

func (p *GetPartyMembersRequest) GetPartyId() (v int64) {
	return p.PartyId
}

func (p *GetPartyMembersRequest) GetPageNum() (v int64) {
	return p.PageNum
}
func (p *GetPartyMembersRequest) SetPartyId(val int64) {
	p.PartyId = val
}
func (p *GetPartyMembersRequest) SetPageNum(val int64) {
	p.PageNum = val
}

var fieldIDToName_GetPartyMembersRequest = map[int16]string{
	1: "party_id",
	2: "page_num",
}

func (p *GetPartyMembersRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetPartyMembersRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetPartyMembersRequest) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.PartyId = v
	}
	return nil
}
func (p *GetPartyMembersRequest) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.PageNum = v
	}
	return nil
}

func (p *GetPartyMembersRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPartyMembersRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetPartyMembersRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("party_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PartyId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetPartyMembersRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("page_num", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PageNum); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetPartyMembersRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartyMembersRequest(%+v)", *p)

}

func (p *GetPartyMembersRequest) DeepEqual(ano *GetPartyMembersRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PartyId) {
		return false
	}
	if !p.Field2DeepEqual(ano.PageNum) {
		return false
	}
	return true
}

func (p *GetPartyMembersRequest) Field1DeepEqual(src int64) bool {

	if p.PartyId != src {
		return false
	}
	return true
}
func (p *GetPartyMembersRequest) Field2DeepEqual(src int64) bool {

	if p.PageNum != src {
		return false
	}
	return true
}

type GetPartyMembersResponse struct {
	Base        *base.BaseResp `thrift:"base,1" frugal:"1,default,base.BaseResp" json:"base"`
	MemberCount *int64         `thrift:"member_count,2,optional" frugal:"2,optional,i64" json:"member_count,omitempty"`
	MemberList  []*base.User   `thrift:"member_list,3,optional" frugal:"3,optional,list<base.User>" json:"member_list,omitempty"`
}

func NewGetPartyMembersResponse() *GetPartyMembersResponse {
	return &GetPartyMembersResponse{}
}

func (p *GetPartyMembersResponse) InitDefault() {
	*p = GetPartyMembersResponse{}
}

var GetPartyMembersResponse_Base_DEFAULT *base.BaseResp

func (p *GetPartyMembersResponse) GetBase() (v *base.BaseResp) {
	if !p.IsSetBase() {
		return GetPartyMembersResponse_Base_DEFAULT
	}
	return p.Base
}

var GetPartyMembersResponse_MemberCount_DEFAULT int64

func (p *GetPartyMembersResponse) GetMemberCount() (v int64) {
	if !p.IsSetMemberCount() {
		return GetPartyMembersResponse_MemberCount_DEFAULT
	}
	return *p.MemberCount
}

var GetPartyMembersResponse_MemberList_DEFAULT []*base.User

func (p *GetPartyMembersResponse) GetMemberList() (v []*base.User) {
	if !p.IsSetMemberList() {
		return GetPartyMembersResponse_MemberList_DEFAULT
	}
	return p.MemberList
}
func (p *GetPartyMembersResponse) SetBase(val *base.BaseResp) {
	p.Base = val
}
func (p *GetPartyMembersResponse) SetMemberCount(val *int64) {
	p.MemberCount = val
}
func (p *GetPartyMembersResponse) SetMemberList(val []*base.User) {
	p.MemberList = val
}

var fieldIDToName_GetPartyMembersResponse = map[int16]string{
	1: "base",
	2: "member_count",
	3: "member_list",
}

func (p *GetPartyMembersResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetPartyMembersResponse) IsSetMemberCount() bool {
	return p.MemberCount != nil
}

func (p *GetPartyMembersResponse) IsSetMemberList() bool {
	return p.MemberList != nil
}

func (p *GetPartyMembersResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetPartyMembersResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetPartyMembersResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Base = base.NewBaseResp()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}
func (p *GetPartyMembersResponse) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.MemberCount = &v
	}
	return nil
}
func (p *GetPartyMembersResponse) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.MemberList = make([]*base.User, 0, size)
	for i := 0; i < size; i++ {
		_elem := base.NewUser()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.MemberList = append(p.MemberList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetPartyMembersResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPartyMembersResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetPartyMembersResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetPartyMembersResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemberCount() {
		if err = oprot.WriteFieldBegin("member_count", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.MemberCount); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetPartyMembersResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemberList() {
		if err = oprot.WriteFieldBegin("member_list", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MemberList)); err != nil {
			return err
		}
		for _, v := range p.MemberList {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetPartyMembersResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartyMembersResponse(%+v)", *p)

}

func (p *GetPartyMembersResponse) DeepEqual(ano *GetPartyMembersResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.MemberCount) {
		return false
	}
	if !p.Field3DeepEqual(ano.MemberList) {
		return false
	}
	return true
}

func (p *GetPartyMembersResponse) Field1DeepEqual(src *base.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetPartyMembersResponse) Field2DeepEqual(src *int64) bool {

	if p.MemberCount == src {
		return true
	} else if p.MemberCount == nil || src == nil {
		return false
	}
	if *p.MemberCount != *src {
		return false
	}
	return true
}
func (p *GetPartyMembersResponse) Field3DeepEqual(src []*base.User) bool {

	if len(p.MemberList) != len(src) {
		return false
	}
	for i, v := range p.MemberList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type SearchPartyRequest struct {
	Content           *string `thrift:"content,1,optional" frugal:"1,optional,string" json:"content,omitempty"`
	PartyType         *int64  `thrift:"party_type,2,optional" frugal:"2,optional,i64" json:"party_type,omitempty"`
	Province          *string `thrift:"province,3,optional" frugal:"3,optional,string" json:"province,omitempty"`
	City              *string `thrift:"city,4,optional" frugal:"4,optional,string" json:"city,omitempty"`
	StartTimeDuration *int64  `thrift:"start_time_duration,5,optional" frugal:"5,optional,i64" json:"start_time_duration,omitempty"`
	SearchType        *int64  `thrift:"search_type,6,optional" frugal:"6,optional,i64" json:"search_type,omitempty"`
	PageNum           int64   `thrift:"page_num,7" frugal:"7,default,i64" json:"page_num"`
}

func NewSearchPartyRequest() *SearchPartyRequest {
	return &SearchPartyRequest{}
}

func (p *SearchPartyRequest) InitDefault() {
	*p = SearchPartyRequest{}
}

var SearchPartyRequest_Content_DEFAULT string

func (p *SearchPartyRequest) GetContent() (v string) {
	if !p.IsSetContent() {
		return SearchPartyRequest_Content_DEFAULT
	}
	return *p.Content
}

var SearchPartyRequest_PartyType_DEFAULT int64

func (p *SearchPartyRequest) GetPartyType() (v int64) {
	if !p.IsSetPartyType() {
		return SearchPartyRequest_PartyType_DEFAULT
	}
	return *p.PartyType
}

var SearchPartyRequest_Province_DEFAULT string

func (p *SearchPartyRequest) GetProvince() (v string) {
	if !p.IsSetProvince() {
		return SearchPartyRequest_Province_DEFAULT
	}
	return *p.Province
}

var SearchPartyRequest_City_DEFAULT string

func (p *SearchPartyRequest) GetCity() (v string) {
	if !p.IsSetCity() {
		return SearchPartyRequest_City_DEFAULT
	}
	return *p.City
}

var SearchPartyRequest_StartTimeDuration_DEFAULT int64

func (p *SearchPartyRequest) GetStartTimeDuration() (v int64) {
	if !p.IsSetStartTimeDuration() {
		return SearchPartyRequest_StartTimeDuration_DEFAULT
	}
	return *p.StartTimeDuration
}

var SearchPartyRequest_SearchType_DEFAULT int64

func (p *SearchPartyRequest) GetSearchType() (v int64) {
	if !p.IsSetSearchType() {
		return SearchPartyRequest_SearchType_DEFAULT
	}
	return *p.SearchType
}

func (p *SearchPartyRequest) GetPageNum() (v int64) {
	return p.PageNum
}
func (p *SearchPartyRequest) SetContent(val *string) {
	p.Content = val
}
func (p *SearchPartyRequest) SetPartyType(val *int64) {
	p.PartyType = val
}
func (p *SearchPartyRequest) SetProvince(val *string) {
	p.Province = val
}
func (p *SearchPartyRequest) SetCity(val *string) {
	p.City = val
}
func (p *SearchPartyRequest) SetStartTimeDuration(val *int64) {
	p.StartTimeDuration = val
}
func (p *SearchPartyRequest) SetSearchType(val *int64) {
	p.SearchType = val
}
func (p *SearchPartyRequest) SetPageNum(val int64) {
	p.PageNum = val
}

var fieldIDToName_SearchPartyRequest = map[int16]string{
	1: "content",
	2: "party_type",
	3: "province",
	4: "city",
	5: "start_time_duration",
	6: "search_type",
	7: "page_num",
}

func (p *SearchPartyRequest) IsSetContent() bool {
	return p.Content != nil
}

func (p *SearchPartyRequest) IsSetPartyType() bool {
	return p.PartyType != nil
}

func (p *SearchPartyRequest) IsSetProvince() bool {
	return p.Province != nil
}

func (p *SearchPartyRequest) IsSetCity() bool {
	return p.City != nil
}

func (p *SearchPartyRequest) IsSetStartTimeDuration() bool {
	return p.StartTimeDuration != nil
}

func (p *SearchPartyRequest) IsSetSearchType() bool {
	return p.SearchType != nil
}

func (p *SearchPartyRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SearchPartyRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SearchPartyRequest) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Content = &v
	}
	return nil
}
func (p *SearchPartyRequest) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.PartyType = &v
	}
	return nil
}
func (p *SearchPartyRequest) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Province = &v
	}
	return nil
}
func (p *SearchPartyRequest) ReadField4(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.City = &v
	}
	return nil
}
func (p *SearchPartyRequest) ReadField5(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.StartTimeDuration = &v
	}
	return nil
}
func (p *SearchPartyRequest) ReadField6(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.SearchType = &v
	}
	return nil
}
func (p *SearchPartyRequest) ReadField7(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.PageNum = v
	}
	return nil
}

func (p *SearchPartyRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SearchPartyRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SearchPartyRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetContent() {
		if err = oprot.WriteFieldBegin("content", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Content); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SearchPartyRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartyType() {
		if err = oprot.WriteFieldBegin("party_type", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.PartyType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *SearchPartyRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetProvince() {
		if err = oprot.WriteFieldBegin("province", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Province); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *SearchPartyRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetCity() {
		if err = oprot.WriteFieldBegin("city", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.City); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *SearchPartyRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartTimeDuration() {
		if err = oprot.WriteFieldBegin("start_time_duration", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.StartTimeDuration); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *SearchPartyRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetSearchType() {
		if err = oprot.WriteFieldBegin("search_type", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.SearchType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *SearchPartyRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("page_num", thrift.I64, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PageNum); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *SearchPartyRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SearchPartyRequest(%+v)", *p)

}

func (p *SearchPartyRequest) DeepEqual(ano *SearchPartyRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Content) {
		return false
	}
	if !p.Field2DeepEqual(ano.PartyType) {
		return false
	}
	if !p.Field3DeepEqual(ano.Province) {
		return false
	}
	if !p.Field4DeepEqual(ano.City) {
		return false
	}
	if !p.Field5DeepEqual(ano.StartTimeDuration) {
		return false
	}
	if !p.Field6DeepEqual(ano.SearchType) {
		return false
	}
	if !p.Field7DeepEqual(ano.PageNum) {
		return false
	}
	return true
}

func (p *SearchPartyRequest) Field1DeepEqual(src *string) bool {

	if p.Content == src {
		return true
	} else if p.Content == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Content, *src) != 0 {
		return false
	}
	return true
}
func (p *SearchPartyRequest) Field2DeepEqual(src *int64) bool {

	if p.PartyType == src {
		return true
	} else if p.PartyType == nil || src == nil {
		return false
	}
	if *p.PartyType != *src {
		return false
	}
	return true
}
func (p *SearchPartyRequest) Field3DeepEqual(src *string) bool {

	if p.Province == src {
		return true
	} else if p.Province == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Province, *src) != 0 {
		return false
	}
	return true
}
func (p *SearchPartyRequest) Field4DeepEqual(src *string) bool {

	if p.City == src {
		return true
	} else if p.City == nil || src == nil {
		return false
	}
	if strings.Compare(*p.City, *src) != 0 {
		return false
	}
	return true
}
func (p *SearchPartyRequest) Field5DeepEqual(src *int64) bool {

	if p.StartTimeDuration == src {
		return true
	} else if p.StartTimeDuration == nil || src == nil {
		return false
	}
	if *p.StartTimeDuration != *src {
		return false
	}
	return true
}
func (p *SearchPartyRequest) Field6DeepEqual(src *int64) bool {

	if p.SearchType == src {
		return true
	} else if p.SearchType == nil || src == nil {
		return false
	}
	if *p.SearchType != *src {
		return false
	}
	return true
}
func (p *SearchPartyRequest) Field7DeepEqual(src int64) bool {

	if p.PageNum != src {
		return false
	}
	return true
}

type SearchPartyResponse struct {
	Base       *base.BaseResp `thrift:"base,1" frugal:"1,default,base.BaseResp" json:"base"`
	PartyCount *int64         `thrift:"party_count,2,optional" frugal:"2,optional,i64" json:"party_count,omitempty"`
	PartyList  []*base.Party  `thrift:"party_list,3,optional" frugal:"3,optional,list<base.Party>" json:"party_list,omitempty"`
}

func NewSearchPartyResponse() *SearchPartyResponse {
	return &SearchPartyResponse{}
}

func (p *SearchPartyResponse) InitDefault() {
	*p = SearchPartyResponse{}
}

var SearchPartyResponse_Base_DEFAULT *base.BaseResp

func (p *SearchPartyResponse) GetBase() (v *base.BaseResp) {
	if !p.IsSetBase() {
		return SearchPartyResponse_Base_DEFAULT
	}
	return p.Base
}

var SearchPartyResponse_PartyCount_DEFAULT int64

func (p *SearchPartyResponse) GetPartyCount() (v int64) {
	if !p.IsSetPartyCount() {
		return SearchPartyResponse_PartyCount_DEFAULT
	}
	return *p.PartyCount
}

var SearchPartyResponse_PartyList_DEFAULT []*base.Party

func (p *SearchPartyResponse) GetPartyList() (v []*base.Party) {
	if !p.IsSetPartyList() {
		return SearchPartyResponse_PartyList_DEFAULT
	}
	return p.PartyList
}
func (p *SearchPartyResponse) SetBase(val *base.BaseResp) {
	p.Base = val
}
func (p *SearchPartyResponse) SetPartyCount(val *int64) {
	p.PartyCount = val
}
func (p *SearchPartyResponse) SetPartyList(val []*base.Party) {
	p.PartyList = val
}

var fieldIDToName_SearchPartyResponse = map[int16]string{
	1: "base",
	2: "party_count",
	3: "party_list",
}

func (p *SearchPartyResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *SearchPartyResponse) IsSetPartyCount() bool {
	return p.PartyCount != nil
}

func (p *SearchPartyResponse) IsSetPartyList() bool {
	return p.PartyList != nil
}

func (p *SearchPartyResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SearchPartyResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SearchPartyResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Base = base.NewBaseResp()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}
func (p *SearchPartyResponse) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.PartyCount = &v
	}
	return nil
}
func (p *SearchPartyResponse) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.PartyList = make([]*base.Party, 0, size)
	for i := 0; i < size; i++ {
		_elem := base.NewParty()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.PartyList = append(p.PartyList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *SearchPartyResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SearchPartyResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SearchPartyResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SearchPartyResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartyCount() {
		if err = oprot.WriteFieldBegin("party_count", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.PartyCount); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *SearchPartyResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartyList() {
		if err = oprot.WriteFieldBegin("party_list", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PartyList)); err != nil {
			return err
		}
		for _, v := range p.PartyList {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *SearchPartyResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SearchPartyResponse(%+v)", *p)

}

func (p *SearchPartyResponse) DeepEqual(ano *SearchPartyResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.PartyCount) {
		return false
	}
	if !p.Field3DeepEqual(ano.PartyList) {
		return false
	}
	return true
}

func (p *SearchPartyResponse) Field1DeepEqual(src *base.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *SearchPartyResponse) Field2DeepEqual(src *int64) bool {

	if p.PartyCount == src {
		return true
	} else if p.PartyCount == nil || src == nil {
		return false
	}
	if *p.PartyCount != *src {
		return false
	}
	return true
}
func (p *SearchPartyResponse) Field3DeepEqual(src []*base.Party) bool {

	if len(p.PartyList) != len(src) {
		return false
	}
	for i, v := range p.PartyList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type PartyHandler interface {
	CreateParty(ctx context.Context, req *CreatePartyRequest) (r *CreatePartyResponse, err error)

	JoinParty(ctx context.Context, req *JoinPartyRequest) (r *JoinPartyResponse, err error)

	ApplyList(ctx context.Context, req *ApplyListRequest) (r *ApplyListResponse, err error)

	PermitJoin(ctx context.Context, req *PermitJoinRequest) (r *PermitJoinResponse, err error)

	GetPartyMembers(ctx context.Context, req *GetPartyMembersRequest) (r *GetPartyMembersResponse, err error)

	SearchParty(ctx context.Context, req *SearchPartyRequest) (r *SearchPartyResponse, err error)
}

type PartyHandlerClient struct {
	c thrift.TClient
}

func NewPartyHandlerClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *PartyHandlerClient {
	return &PartyHandlerClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewPartyHandlerClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *PartyHandlerClient {
	return &PartyHandlerClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewPartyHandlerClient(c thrift.TClient) *PartyHandlerClient {
	return &PartyHandlerClient{
		c: c,
	}
}

func (p *PartyHandlerClient) Client_() thrift.TClient {
	return p.c
}

func (p *PartyHandlerClient) CreateParty(ctx context.Context, req *CreatePartyRequest) (r *CreatePartyResponse, err error) {
	var _args PartyHandlerCreatePartyArgs
	_args.Req = req
	var _result PartyHandlerCreatePartyResult
	if err = p.Client_().Call(ctx, "CreateParty", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *PartyHandlerClient) JoinParty(ctx context.Context, req *JoinPartyRequest) (r *JoinPartyResponse, err error) {
	var _args PartyHandlerJoinPartyArgs
	_args.Req = req
	var _result PartyHandlerJoinPartyResult
	if err = p.Client_().Call(ctx, "JoinParty", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *PartyHandlerClient) ApplyList(ctx context.Context, req *ApplyListRequest) (r *ApplyListResponse, err error) {
	var _args PartyHandlerApplyListArgs
	_args.Req = req
	var _result PartyHandlerApplyListResult
	if err = p.Client_().Call(ctx, "ApplyList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *PartyHandlerClient) PermitJoin(ctx context.Context, req *PermitJoinRequest) (r *PermitJoinResponse, err error) {
	var _args PartyHandlerPermitJoinArgs
	_args.Req = req
	var _result PartyHandlerPermitJoinResult
	if err = p.Client_().Call(ctx, "PermitJoin", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *PartyHandlerClient) GetPartyMembers(ctx context.Context, req *GetPartyMembersRequest) (r *GetPartyMembersResponse, err error) {
	var _args PartyHandlerGetPartyMembersArgs
	_args.Req = req
	var _result PartyHandlerGetPartyMembersResult
	if err = p.Client_().Call(ctx, "GetPartyMembers", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *PartyHandlerClient) SearchParty(ctx context.Context, req *SearchPartyRequest) (r *SearchPartyResponse, err error) {
	var _args PartyHandlerSearchPartyArgs
	_args.Req = req
	var _result PartyHandlerSearchPartyResult
	if err = p.Client_().Call(ctx, "SearchParty", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type PartyHandlerProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      PartyHandler
}

func (p *PartyHandlerProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *PartyHandlerProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *PartyHandlerProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewPartyHandlerProcessor(handler PartyHandler) *PartyHandlerProcessor {
	self := &PartyHandlerProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("CreateParty", &partyHandlerProcessorCreateParty{handler: handler})
	self.AddToProcessorMap("JoinParty", &partyHandlerProcessorJoinParty{handler: handler})
	self.AddToProcessorMap("ApplyList", &partyHandlerProcessorApplyList{handler: handler})
	self.AddToProcessorMap("PermitJoin", &partyHandlerProcessorPermitJoin{handler: handler})
	self.AddToProcessorMap("GetPartyMembers", &partyHandlerProcessorGetPartyMembers{handler: handler})
	self.AddToProcessorMap("SearchParty", &partyHandlerProcessorSearchParty{handler: handler})
	return self
}
func (p *PartyHandlerProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type partyHandlerProcessorCreateParty struct {
	handler PartyHandler
}

func (p *partyHandlerProcessorCreateParty) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PartyHandlerCreatePartyArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateParty", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := PartyHandlerCreatePartyResult{}
	var retval *CreatePartyResponse
	if retval, err2 = p.handler.CreateParty(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateParty: "+err2.Error())
		oprot.WriteMessageBegin("CreateParty", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateParty", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type partyHandlerProcessorJoinParty struct {
	handler PartyHandler
}

func (p *partyHandlerProcessorJoinParty) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PartyHandlerJoinPartyArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("JoinParty", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := PartyHandlerJoinPartyResult{}
	var retval *JoinPartyResponse
	if retval, err2 = p.handler.JoinParty(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing JoinParty: "+err2.Error())
		oprot.WriteMessageBegin("JoinParty", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("JoinParty", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type partyHandlerProcessorApplyList struct {
	handler PartyHandler
}

func (p *partyHandlerProcessorApplyList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PartyHandlerApplyListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ApplyList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := PartyHandlerApplyListResult{}
	var retval *ApplyListResponse
	if retval, err2 = p.handler.ApplyList(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ApplyList: "+err2.Error())
		oprot.WriteMessageBegin("ApplyList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ApplyList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type partyHandlerProcessorPermitJoin struct {
	handler PartyHandler
}

func (p *partyHandlerProcessorPermitJoin) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PartyHandlerPermitJoinArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("PermitJoin", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := PartyHandlerPermitJoinResult{}
	var retval *PermitJoinResponse
	if retval, err2 = p.handler.PermitJoin(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing PermitJoin: "+err2.Error())
		oprot.WriteMessageBegin("PermitJoin", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("PermitJoin", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type partyHandlerProcessorGetPartyMembers struct {
	handler PartyHandler
}

func (p *partyHandlerProcessorGetPartyMembers) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PartyHandlerGetPartyMembersArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetPartyMembers", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := PartyHandlerGetPartyMembersResult{}
	var retval *GetPartyMembersResponse
	if retval, err2 = p.handler.GetPartyMembers(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetPartyMembers: "+err2.Error())
		oprot.WriteMessageBegin("GetPartyMembers", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetPartyMembers", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type partyHandlerProcessorSearchParty struct {
	handler PartyHandler
}

func (p *partyHandlerProcessorSearchParty) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PartyHandlerSearchPartyArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("SearchParty", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := PartyHandlerSearchPartyResult{}
	var retval *SearchPartyResponse
	if retval, err2 = p.handler.SearchParty(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SearchParty: "+err2.Error())
		oprot.WriteMessageBegin("SearchParty", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("SearchParty", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type PartyHandlerCreatePartyArgs struct {
	Req *CreatePartyRequest `thrift:"req,1" frugal:"1,default,CreatePartyRequest" json:"req"`
}

func NewPartyHandlerCreatePartyArgs() *PartyHandlerCreatePartyArgs {
	return &PartyHandlerCreatePartyArgs{}
}

func (p *PartyHandlerCreatePartyArgs) InitDefault() {
	*p = PartyHandlerCreatePartyArgs{}
}

var PartyHandlerCreatePartyArgs_Req_DEFAULT *CreatePartyRequest

func (p *PartyHandlerCreatePartyArgs) GetReq() (v *CreatePartyRequest) {
	if !p.IsSetReq() {
		return PartyHandlerCreatePartyArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *PartyHandlerCreatePartyArgs) SetReq(val *CreatePartyRequest) {
	p.Req = val
}

var fieldIDToName_PartyHandlerCreatePartyArgs = map[int16]string{
	1: "req",
}

func (p *PartyHandlerCreatePartyArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PartyHandlerCreatePartyArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PartyHandlerCreatePartyArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PartyHandlerCreatePartyArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewCreatePartyRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PartyHandlerCreatePartyArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateParty_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PartyHandlerCreatePartyArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PartyHandlerCreatePartyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PartyHandlerCreatePartyArgs(%+v)", *p)

}

func (p *PartyHandlerCreatePartyArgs) DeepEqual(ano *PartyHandlerCreatePartyArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *PartyHandlerCreatePartyArgs) Field1DeepEqual(src *CreatePartyRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type PartyHandlerCreatePartyResult struct {
	Success *CreatePartyResponse `thrift:"success,0,optional" frugal:"0,optional,CreatePartyResponse" json:"success,omitempty"`
}

func NewPartyHandlerCreatePartyResult() *PartyHandlerCreatePartyResult {
	return &PartyHandlerCreatePartyResult{}
}

func (p *PartyHandlerCreatePartyResult) InitDefault() {
	*p = PartyHandlerCreatePartyResult{}
}

var PartyHandlerCreatePartyResult_Success_DEFAULT *CreatePartyResponse

func (p *PartyHandlerCreatePartyResult) GetSuccess() (v *CreatePartyResponse) {
	if !p.IsSetSuccess() {
		return PartyHandlerCreatePartyResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PartyHandlerCreatePartyResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreatePartyResponse)
}

var fieldIDToName_PartyHandlerCreatePartyResult = map[int16]string{
	0: "success",
}

func (p *PartyHandlerCreatePartyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PartyHandlerCreatePartyResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PartyHandlerCreatePartyResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PartyHandlerCreatePartyResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewCreatePartyResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PartyHandlerCreatePartyResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateParty_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PartyHandlerCreatePartyResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PartyHandlerCreatePartyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PartyHandlerCreatePartyResult(%+v)", *p)

}

func (p *PartyHandlerCreatePartyResult) DeepEqual(ano *PartyHandlerCreatePartyResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *PartyHandlerCreatePartyResult) Field0DeepEqual(src *CreatePartyResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type PartyHandlerJoinPartyArgs struct {
	Req *JoinPartyRequest `thrift:"req,1" frugal:"1,default,JoinPartyRequest" json:"req"`
}

func NewPartyHandlerJoinPartyArgs() *PartyHandlerJoinPartyArgs {
	return &PartyHandlerJoinPartyArgs{}
}

func (p *PartyHandlerJoinPartyArgs) InitDefault() {
	*p = PartyHandlerJoinPartyArgs{}
}

var PartyHandlerJoinPartyArgs_Req_DEFAULT *JoinPartyRequest

func (p *PartyHandlerJoinPartyArgs) GetReq() (v *JoinPartyRequest) {
	if !p.IsSetReq() {
		return PartyHandlerJoinPartyArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *PartyHandlerJoinPartyArgs) SetReq(val *JoinPartyRequest) {
	p.Req = val
}

var fieldIDToName_PartyHandlerJoinPartyArgs = map[int16]string{
	1: "req",
}

func (p *PartyHandlerJoinPartyArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PartyHandlerJoinPartyArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PartyHandlerJoinPartyArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PartyHandlerJoinPartyArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewJoinPartyRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PartyHandlerJoinPartyArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("JoinParty_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PartyHandlerJoinPartyArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PartyHandlerJoinPartyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PartyHandlerJoinPartyArgs(%+v)", *p)

}

func (p *PartyHandlerJoinPartyArgs) DeepEqual(ano *PartyHandlerJoinPartyArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *PartyHandlerJoinPartyArgs) Field1DeepEqual(src *JoinPartyRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type PartyHandlerJoinPartyResult struct {
	Success *JoinPartyResponse `thrift:"success,0,optional" frugal:"0,optional,JoinPartyResponse" json:"success,omitempty"`
}

func NewPartyHandlerJoinPartyResult() *PartyHandlerJoinPartyResult {
	return &PartyHandlerJoinPartyResult{}
}

func (p *PartyHandlerJoinPartyResult) InitDefault() {
	*p = PartyHandlerJoinPartyResult{}
}

var PartyHandlerJoinPartyResult_Success_DEFAULT *JoinPartyResponse

func (p *PartyHandlerJoinPartyResult) GetSuccess() (v *JoinPartyResponse) {
	if !p.IsSetSuccess() {
		return PartyHandlerJoinPartyResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PartyHandlerJoinPartyResult) SetSuccess(x interface{}) {
	p.Success = x.(*JoinPartyResponse)
}

var fieldIDToName_PartyHandlerJoinPartyResult = map[int16]string{
	0: "success",
}

func (p *PartyHandlerJoinPartyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PartyHandlerJoinPartyResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PartyHandlerJoinPartyResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PartyHandlerJoinPartyResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewJoinPartyResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PartyHandlerJoinPartyResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("JoinParty_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PartyHandlerJoinPartyResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PartyHandlerJoinPartyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PartyHandlerJoinPartyResult(%+v)", *p)

}

func (p *PartyHandlerJoinPartyResult) DeepEqual(ano *PartyHandlerJoinPartyResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *PartyHandlerJoinPartyResult) Field0DeepEqual(src *JoinPartyResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type PartyHandlerApplyListArgs struct {
	Req *ApplyListRequest `thrift:"req,1" frugal:"1,default,ApplyListRequest" json:"req"`
}

func NewPartyHandlerApplyListArgs() *PartyHandlerApplyListArgs {
	return &PartyHandlerApplyListArgs{}
}

func (p *PartyHandlerApplyListArgs) InitDefault() {
	*p = PartyHandlerApplyListArgs{}
}

var PartyHandlerApplyListArgs_Req_DEFAULT *ApplyListRequest

func (p *PartyHandlerApplyListArgs) GetReq() (v *ApplyListRequest) {
	if !p.IsSetReq() {
		return PartyHandlerApplyListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *PartyHandlerApplyListArgs) SetReq(val *ApplyListRequest) {
	p.Req = val
}

var fieldIDToName_PartyHandlerApplyListArgs = map[int16]string{
	1: "req",
}

func (p *PartyHandlerApplyListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PartyHandlerApplyListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PartyHandlerApplyListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PartyHandlerApplyListArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewApplyListRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PartyHandlerApplyListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ApplyList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PartyHandlerApplyListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PartyHandlerApplyListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PartyHandlerApplyListArgs(%+v)", *p)

}

func (p *PartyHandlerApplyListArgs) DeepEqual(ano *PartyHandlerApplyListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *PartyHandlerApplyListArgs) Field1DeepEqual(src *ApplyListRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type PartyHandlerApplyListResult struct {
	Success *ApplyListResponse `thrift:"success,0,optional" frugal:"0,optional,ApplyListResponse" json:"success,omitempty"`
}

func NewPartyHandlerApplyListResult() *PartyHandlerApplyListResult {
	return &PartyHandlerApplyListResult{}
}

func (p *PartyHandlerApplyListResult) InitDefault() {
	*p = PartyHandlerApplyListResult{}
}

var PartyHandlerApplyListResult_Success_DEFAULT *ApplyListResponse

func (p *PartyHandlerApplyListResult) GetSuccess() (v *ApplyListResponse) {
	if !p.IsSetSuccess() {
		return PartyHandlerApplyListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PartyHandlerApplyListResult) SetSuccess(x interface{}) {
	p.Success = x.(*ApplyListResponse)
}

var fieldIDToName_PartyHandlerApplyListResult = map[int16]string{
	0: "success",
}

func (p *PartyHandlerApplyListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PartyHandlerApplyListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PartyHandlerApplyListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PartyHandlerApplyListResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewApplyListResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PartyHandlerApplyListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ApplyList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PartyHandlerApplyListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PartyHandlerApplyListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PartyHandlerApplyListResult(%+v)", *p)

}

func (p *PartyHandlerApplyListResult) DeepEqual(ano *PartyHandlerApplyListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *PartyHandlerApplyListResult) Field0DeepEqual(src *ApplyListResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type PartyHandlerPermitJoinArgs struct {
	Req *PermitJoinRequest `thrift:"req,1" frugal:"1,default,PermitJoinRequest" json:"req"`
}

func NewPartyHandlerPermitJoinArgs() *PartyHandlerPermitJoinArgs {
	return &PartyHandlerPermitJoinArgs{}
}

func (p *PartyHandlerPermitJoinArgs) InitDefault() {
	*p = PartyHandlerPermitJoinArgs{}
}

var PartyHandlerPermitJoinArgs_Req_DEFAULT *PermitJoinRequest

func (p *PartyHandlerPermitJoinArgs) GetReq() (v *PermitJoinRequest) {
	if !p.IsSetReq() {
		return PartyHandlerPermitJoinArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *PartyHandlerPermitJoinArgs) SetReq(val *PermitJoinRequest) {
	p.Req = val
}

var fieldIDToName_PartyHandlerPermitJoinArgs = map[int16]string{
	1: "req",
}

func (p *PartyHandlerPermitJoinArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PartyHandlerPermitJoinArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PartyHandlerPermitJoinArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PartyHandlerPermitJoinArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewPermitJoinRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PartyHandlerPermitJoinArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PermitJoin_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PartyHandlerPermitJoinArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PartyHandlerPermitJoinArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PartyHandlerPermitJoinArgs(%+v)", *p)

}

func (p *PartyHandlerPermitJoinArgs) DeepEqual(ano *PartyHandlerPermitJoinArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *PartyHandlerPermitJoinArgs) Field1DeepEqual(src *PermitJoinRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type PartyHandlerPermitJoinResult struct {
	Success *PermitJoinResponse `thrift:"success,0,optional" frugal:"0,optional,PermitJoinResponse" json:"success,omitempty"`
}

func NewPartyHandlerPermitJoinResult() *PartyHandlerPermitJoinResult {
	return &PartyHandlerPermitJoinResult{}
}

func (p *PartyHandlerPermitJoinResult) InitDefault() {
	*p = PartyHandlerPermitJoinResult{}
}

var PartyHandlerPermitJoinResult_Success_DEFAULT *PermitJoinResponse

func (p *PartyHandlerPermitJoinResult) GetSuccess() (v *PermitJoinResponse) {
	if !p.IsSetSuccess() {
		return PartyHandlerPermitJoinResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PartyHandlerPermitJoinResult) SetSuccess(x interface{}) {
	p.Success = x.(*PermitJoinResponse)
}

var fieldIDToName_PartyHandlerPermitJoinResult = map[int16]string{
	0: "success",
}

func (p *PartyHandlerPermitJoinResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PartyHandlerPermitJoinResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PartyHandlerPermitJoinResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PartyHandlerPermitJoinResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewPermitJoinResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PartyHandlerPermitJoinResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PermitJoin_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PartyHandlerPermitJoinResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PartyHandlerPermitJoinResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PartyHandlerPermitJoinResult(%+v)", *p)

}

func (p *PartyHandlerPermitJoinResult) DeepEqual(ano *PartyHandlerPermitJoinResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *PartyHandlerPermitJoinResult) Field0DeepEqual(src *PermitJoinResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type PartyHandlerGetPartyMembersArgs struct {
	Req *GetPartyMembersRequest `thrift:"req,1" frugal:"1,default,GetPartyMembersRequest" json:"req"`
}

func NewPartyHandlerGetPartyMembersArgs() *PartyHandlerGetPartyMembersArgs {
	return &PartyHandlerGetPartyMembersArgs{}
}

func (p *PartyHandlerGetPartyMembersArgs) InitDefault() {
	*p = PartyHandlerGetPartyMembersArgs{}
}

var PartyHandlerGetPartyMembersArgs_Req_DEFAULT *GetPartyMembersRequest

func (p *PartyHandlerGetPartyMembersArgs) GetReq() (v *GetPartyMembersRequest) {
	if !p.IsSetReq() {
		return PartyHandlerGetPartyMembersArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *PartyHandlerGetPartyMembersArgs) SetReq(val *GetPartyMembersRequest) {
	p.Req = val
}

var fieldIDToName_PartyHandlerGetPartyMembersArgs = map[int16]string{
	1: "req",
}

func (p *PartyHandlerGetPartyMembersArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PartyHandlerGetPartyMembersArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PartyHandlerGetPartyMembersArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PartyHandlerGetPartyMembersArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetPartyMembersRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PartyHandlerGetPartyMembersArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPartyMembers_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PartyHandlerGetPartyMembersArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PartyHandlerGetPartyMembersArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PartyHandlerGetPartyMembersArgs(%+v)", *p)

}

func (p *PartyHandlerGetPartyMembersArgs) DeepEqual(ano *PartyHandlerGetPartyMembersArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *PartyHandlerGetPartyMembersArgs) Field1DeepEqual(src *GetPartyMembersRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type PartyHandlerGetPartyMembersResult struct {
	Success *GetPartyMembersResponse `thrift:"success,0,optional" frugal:"0,optional,GetPartyMembersResponse" json:"success,omitempty"`
}

func NewPartyHandlerGetPartyMembersResult() *PartyHandlerGetPartyMembersResult {
	return &PartyHandlerGetPartyMembersResult{}
}

func (p *PartyHandlerGetPartyMembersResult) InitDefault() {
	*p = PartyHandlerGetPartyMembersResult{}
}

var PartyHandlerGetPartyMembersResult_Success_DEFAULT *GetPartyMembersResponse

func (p *PartyHandlerGetPartyMembersResult) GetSuccess() (v *GetPartyMembersResponse) {
	if !p.IsSetSuccess() {
		return PartyHandlerGetPartyMembersResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PartyHandlerGetPartyMembersResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetPartyMembersResponse)
}

var fieldIDToName_PartyHandlerGetPartyMembersResult = map[int16]string{
	0: "success",
}

func (p *PartyHandlerGetPartyMembersResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PartyHandlerGetPartyMembersResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PartyHandlerGetPartyMembersResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PartyHandlerGetPartyMembersResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetPartyMembersResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PartyHandlerGetPartyMembersResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPartyMembers_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PartyHandlerGetPartyMembersResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PartyHandlerGetPartyMembersResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PartyHandlerGetPartyMembersResult(%+v)", *p)

}

func (p *PartyHandlerGetPartyMembersResult) DeepEqual(ano *PartyHandlerGetPartyMembersResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *PartyHandlerGetPartyMembersResult) Field0DeepEqual(src *GetPartyMembersResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type PartyHandlerSearchPartyArgs struct {
	Req *SearchPartyRequest `thrift:"req,1" frugal:"1,default,SearchPartyRequest" json:"req"`
}

func NewPartyHandlerSearchPartyArgs() *PartyHandlerSearchPartyArgs {
	return &PartyHandlerSearchPartyArgs{}
}

func (p *PartyHandlerSearchPartyArgs) InitDefault() {
	*p = PartyHandlerSearchPartyArgs{}
}

var PartyHandlerSearchPartyArgs_Req_DEFAULT *SearchPartyRequest

func (p *PartyHandlerSearchPartyArgs) GetReq() (v *SearchPartyRequest) {
	if !p.IsSetReq() {
		return PartyHandlerSearchPartyArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *PartyHandlerSearchPartyArgs) SetReq(val *SearchPartyRequest) {
	p.Req = val
}

var fieldIDToName_PartyHandlerSearchPartyArgs = map[int16]string{
	1: "req",
}

func (p *PartyHandlerSearchPartyArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PartyHandlerSearchPartyArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PartyHandlerSearchPartyArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PartyHandlerSearchPartyArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewSearchPartyRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PartyHandlerSearchPartyArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SearchParty_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PartyHandlerSearchPartyArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PartyHandlerSearchPartyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PartyHandlerSearchPartyArgs(%+v)", *p)

}

func (p *PartyHandlerSearchPartyArgs) DeepEqual(ano *PartyHandlerSearchPartyArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *PartyHandlerSearchPartyArgs) Field1DeepEqual(src *SearchPartyRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type PartyHandlerSearchPartyResult struct {
	Success *SearchPartyResponse `thrift:"success,0,optional" frugal:"0,optional,SearchPartyResponse" json:"success,omitempty"`
}

func NewPartyHandlerSearchPartyResult() *PartyHandlerSearchPartyResult {
	return &PartyHandlerSearchPartyResult{}
}

func (p *PartyHandlerSearchPartyResult) InitDefault() {
	*p = PartyHandlerSearchPartyResult{}
}

var PartyHandlerSearchPartyResult_Success_DEFAULT *SearchPartyResponse

func (p *PartyHandlerSearchPartyResult) GetSuccess() (v *SearchPartyResponse) {
	if !p.IsSetSuccess() {
		return PartyHandlerSearchPartyResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PartyHandlerSearchPartyResult) SetSuccess(x interface{}) {
	p.Success = x.(*SearchPartyResponse)
}

var fieldIDToName_PartyHandlerSearchPartyResult = map[int16]string{
	0: "success",
}

func (p *PartyHandlerSearchPartyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PartyHandlerSearchPartyResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PartyHandlerSearchPartyResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PartyHandlerSearchPartyResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewSearchPartyResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PartyHandlerSearchPartyResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SearchParty_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PartyHandlerSearchPartyResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PartyHandlerSearchPartyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PartyHandlerSearchPartyResult(%+v)", *p)

}

func (p *PartyHandlerSearchPartyResult) DeepEqual(ano *PartyHandlerSearchPartyResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *PartyHandlerSearchPartyResult) Field0DeepEqual(src *SearchPartyResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
