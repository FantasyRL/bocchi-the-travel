// Code generated by Kitex v0.9.1. DO NOT EDIT.

package partyhandler

import (
	party "bocchi/kitex_gen/party"
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	CreateParty(ctx context.Context, req *party.CreatePartyRequest, callOptions ...callopt.Option) (r *party.CreatePartyResponse, err error)
	JoinParty(ctx context.Context, req *party.JoinPartyRequest, callOptions ...callopt.Option) (r *party.JoinPartyResponse, err error)
	ApplyList(ctx context.Context, req *party.ApplyListRequest, callOptions ...callopt.Option) (r *party.ApplyListResponse, err error)
	PermitJoin(ctx context.Context, req *party.PermitJoinRequest, callOptions ...callopt.Option) (r *party.PermitJoinResponse, err error)
	GetPartyInfo(ctx context.Context, req *party.GetPartyInfoRequest, callOptions ...callopt.Option) (r *party.GetPartyInfoResponse, err error)
	GetPartyMembers(ctx context.Context, req *party.GetPartyMembersRequest, callOptions ...callopt.Option) (r *party.GetPartyMembersResponse, err error)
	SearchParty(ctx context.Context, req *party.SearchPartyRequest, callOptions ...callopt.Option) (r *party.SearchPartyResponse, err error)
	GetMyParties(ctx context.Context, req *party.GetMyPartiesRequest, callOptions ...callopt.Option) (r *party.GetMyPartiesResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kPartyHandlerClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kPartyHandlerClient struct {
	*kClient
}

func (p *kPartyHandlerClient) CreateParty(ctx context.Context, req *party.CreatePartyRequest, callOptions ...callopt.Option) (r *party.CreatePartyResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateParty(ctx, req)
}

func (p *kPartyHandlerClient) JoinParty(ctx context.Context, req *party.JoinPartyRequest, callOptions ...callopt.Option) (r *party.JoinPartyResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.JoinParty(ctx, req)
}

func (p *kPartyHandlerClient) ApplyList(ctx context.Context, req *party.ApplyListRequest, callOptions ...callopt.Option) (r *party.ApplyListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ApplyList(ctx, req)
}

func (p *kPartyHandlerClient) PermitJoin(ctx context.Context, req *party.PermitJoinRequest, callOptions ...callopt.Option) (r *party.PermitJoinResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.PermitJoin(ctx, req)
}

func (p *kPartyHandlerClient) GetPartyInfo(ctx context.Context, req *party.GetPartyInfoRequest, callOptions ...callopt.Option) (r *party.GetPartyInfoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetPartyInfo(ctx, req)
}

func (p *kPartyHandlerClient) GetPartyMembers(ctx context.Context, req *party.GetPartyMembersRequest, callOptions ...callopt.Option) (r *party.GetPartyMembersResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetPartyMembers(ctx, req)
}

func (p *kPartyHandlerClient) SearchParty(ctx context.Context, req *party.SearchPartyRequest, callOptions ...callopt.Option) (r *party.SearchPartyResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SearchParty(ctx, req)
}

func (p *kPartyHandlerClient) GetMyParties(ctx context.Context, req *party.GetMyPartiesRequest, callOptions ...callopt.Option) (r *party.GetMyPartiesResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetMyParties(ctx, req)
}
