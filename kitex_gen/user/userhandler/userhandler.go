// Code generated by Kitex v0.9.1. DO NOT EDIT.

package userhandler

import (
	user "bocchi/kitex_gen/user"
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"Register": kitex.NewMethodInfo(
		registerHandler,
		newUserHandlerRegisterArgs,
		newUserHandlerRegisterResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"Login": kitex.NewMethodInfo(
		loginHandler,
		newUserHandlerLoginArgs,
		newUserHandlerLoginResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"Info": kitex.NewMethodInfo(
		infoHandler,
		newUserHandlerInfoArgs,
		newUserHandlerInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"Avatar": kitex.NewMethodInfo(
		avatarHandler,
		newUserHandlerAvatarArgs,
		newUserHandlerAvatarResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"Switch2FA": kitex.NewMethodInfo(
		switch2FAHandler,
		newUserHandlerSwitch2FAArgs,
		newUserHandlerSwitch2FAResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"Signature": kitex.NewMethodInfo(
		signatureHandler,
		newUserHandlerSignatureArgs,
		newUserHandlerSignatureResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetUserList": kitex.NewMethodInfo(
		getUserListHandler,
		newUserHandlerGetUserListArgs,
		newUserHandlerGetUserListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	userHandlerServiceInfo                = NewServiceInfo()
	userHandlerServiceInfoForClient       = NewServiceInfoForClient()
	userHandlerServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return userHandlerServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return userHandlerServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return userHandlerServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "UserHandler"
	handlerType := (*user.UserHandler)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "user",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func registerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserHandlerRegisterArgs)
	realResult := result.(*user.UserHandlerRegisterResult)
	success, err := handler.(user.UserHandler).Register(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserHandlerRegisterArgs() interface{} {
	return user.NewUserHandlerRegisterArgs()
}

func newUserHandlerRegisterResult() interface{} {
	return user.NewUserHandlerRegisterResult()
}

func loginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserHandlerLoginArgs)
	realResult := result.(*user.UserHandlerLoginResult)
	success, err := handler.(user.UserHandler).Login(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserHandlerLoginArgs() interface{} {
	return user.NewUserHandlerLoginArgs()
}

func newUserHandlerLoginResult() interface{} {
	return user.NewUserHandlerLoginResult()
}

func infoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserHandlerInfoArgs)
	realResult := result.(*user.UserHandlerInfoResult)
	success, err := handler.(user.UserHandler).Info(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserHandlerInfoArgs() interface{} {
	return user.NewUserHandlerInfoArgs()
}

func newUserHandlerInfoResult() interface{} {
	return user.NewUserHandlerInfoResult()
}

func avatarHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserHandlerAvatarArgs)
	realResult := result.(*user.UserHandlerAvatarResult)
	success, err := handler.(user.UserHandler).Avatar(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserHandlerAvatarArgs() interface{} {
	return user.NewUserHandlerAvatarArgs()
}

func newUserHandlerAvatarResult() interface{} {
	return user.NewUserHandlerAvatarResult()
}

func switch2FAHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserHandlerSwitch2FAArgs)
	realResult := result.(*user.UserHandlerSwitch2FAResult)
	success, err := handler.(user.UserHandler).Switch2FA(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserHandlerSwitch2FAArgs() interface{} {
	return user.NewUserHandlerSwitch2FAArgs()
}

func newUserHandlerSwitch2FAResult() interface{} {
	return user.NewUserHandlerSwitch2FAResult()
}

func signatureHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserHandlerSignatureArgs)
	realResult := result.(*user.UserHandlerSignatureResult)
	success, err := handler.(user.UserHandler).Signature(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserHandlerSignatureArgs() interface{} {
	return user.NewUserHandlerSignatureArgs()
}

func newUserHandlerSignatureResult() interface{} {
	return user.NewUserHandlerSignatureResult()
}

func getUserListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserHandlerGetUserListArgs)
	realResult := result.(*user.UserHandlerGetUserListResult)
	success, err := handler.(user.UserHandler).GetUserList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserHandlerGetUserListArgs() interface{} {
	return user.NewUserHandlerGetUserListArgs()
}

func newUserHandlerGetUserListResult() interface{} {
	return user.NewUserHandlerGetUserListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Register(ctx context.Context, req *user.RegisterRequest) (r *user.RegisterResponse, err error) {
	var _args user.UserHandlerRegisterArgs
	_args.Req = req
	var _result user.UserHandlerRegisterResult
	if err = p.c.Call(ctx, "Register", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Login(ctx context.Context, req *user.LoginRequest) (r *user.LoginResponse, err error) {
	var _args user.UserHandlerLoginArgs
	_args.Req = req
	var _result user.UserHandlerLoginResult
	if err = p.c.Call(ctx, "Login", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Info(ctx context.Context, req *user.InfoRequest) (r *user.InfoResponse, err error) {
	var _args user.UserHandlerInfoArgs
	_args.Req = req
	var _result user.UserHandlerInfoResult
	if err = p.c.Call(ctx, "Info", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Avatar(ctx context.Context, req *user.AvatarRequest) (r *user.AvatarResponse, err error) {
	var _args user.UserHandlerAvatarArgs
	_args.Req = req
	var _result user.UserHandlerAvatarResult
	if err = p.c.Call(ctx, "Avatar", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Switch2FA(ctx context.Context, req *user.Switch2FARequest) (r *user.Switch2FAResponse, err error) {
	var _args user.UserHandlerSwitch2FAArgs
	_args.Req = req
	var _result user.UserHandlerSwitch2FAResult
	if err = p.c.Call(ctx, "Switch2FA", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Signature(ctx context.Context, req *user.SignatureRequest) (r *user.SignatureResponse, err error) {
	var _args user.UserHandlerSignatureArgs
	_args.Req = req
	var _result user.UserHandlerSignatureResult
	if err = p.c.Call(ctx, "Signature", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserList(ctx context.Context, req *user.GetUsersRequest) (r *user.GetUsersResponse, err error) {
	var _args user.UserHandlerGetUserListArgs
	_args.Req = req
	var _result user.UserHandlerGetUserListResult
	if err = p.c.Call(ctx, "GetUserList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
