// Code generated by hertz generator.

package api

import (
	api "bocchi/api/biz/model/api"
	"bocchi/api/biz/rpc"
	"bocchi/kitex_gen/interaction"
	"bocchi/pkg/errno"
	"bocchi/pkg/pack"
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// CommentCreate .
// @Summary comment_create
// @Description comment poi
// @Accept json/form
// @Produce json
// @Param poi_id query int true "poi_id"
// @Param content query string true "正文"
// @Param access-token header string false "access-token"
// @Param refresh-token header string false "refresh-token"
// @router /bocchi/poi/comment/create [POST]
func CommentCreate(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.CommentCreateRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.CommentCreateResponse)

	v, _ := c.Get("current_user_id")
	id := v.(int64)
	rpcResp, err := rpc.CommentCreate(ctx, &interaction.CommentCreateRequest{
		PoiId:   req.PoiID,
		Content: req.Content,
		UserId:  id,
	})
	resp.Base = pack.ConvertToAPIBaseResp(rpcResp.Base)
	c.JSON(consts.StatusOK, resp)
}

// CommentDelete .
// @Summary comment_delete
// @Description delete your comment
// @Accept json/form
// @Produce json
// @Param comment_id query int true "评论id"
// @Param access-token header string false "access-token"
// @Param refresh-token header string false "refresh-token"
// @router /bocchi/poi/comment/delete [GET]
func CommentDelete(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.CommentDeleteRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.CommentDeleteResponse)

	v, _ := c.Get("current_user_id")
	id := v.(int64)
	rpcResp, err := rpc.CommentDelete(ctx, &interaction.CommentDeleteRequest{
		Id:     req.ID,
		UserId: id,
	})
	resp.Base = pack.ConvertToAPIBaseResp(rpcResp.Base)
	c.JSON(consts.StatusOK, resp)
}

// CommentList .
// @Summary comment_list
// @Description show poi's comments
// @Accept json/form
// @Produce json
// @Param poi_id query int true "poi_id"
// @Param page_num query string true "页码"
// @router /bocchi/poi/comment/list [GET]
func CommentList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.CommentListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.CommentListResponse)

	rpcResp, err := rpc.CommentList(ctx, &interaction.CommentListRequest{
		PoiId:   req.PoiID,
		PageNum: req.PageNum,
	})
	resp.Base = pack.ConvertToAPIBaseResp(rpcResp.Base)
	if rpcResp.Base.Code != errno.SuccessCode {
		c.JSON(consts.StatusOK, resp)
		return
	}
	resp.CommentCount = rpcResp.CommentCount
	resp.CommentList = pack.ConvertToAPIComments(rpcResp.CommentList)
	c.JSON(consts.StatusOK, resp)
}
