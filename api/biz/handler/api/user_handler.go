// Code generated by hertz generator.

package api

import (
	"context"

	api "bocchi/api/biz/model/api"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// Register .
// @router /bibi/user/register/ [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.RegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.RegisterResponse)

	c.JSON(consts.StatusOK, resp)
}

// Login .
// @router /bibi/user/login/ [POST]
func Login(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.LoginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.LoginResponse)

	c.JSON(consts.StatusOK, resp)
}

// Info .
// @router /bibi/user/info [GET]
func Info(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.InfoRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.InfoResponse)

	c.JSON(consts.StatusOK, resp)
}

// Avatar .
// @router /bibi/user/avatar/upload [PUT]
func Avatar(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.AvatarRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.AvatarResponse)

	c.JSON(consts.StatusOK, resp)
}

// Switch2FA .
// @router /bibi/user/switch2fa [POST]
func Switch2FA(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.Switch2FARequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.Switch2FAResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetAccessToken .
// @router /bibi/access_token/get [GET]
func GetAccessToken(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.GetAccessTokenRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.GetAccessTokenResponse)

	c.JSON(consts.StatusOK, resp)
}
