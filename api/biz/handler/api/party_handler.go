// Code generated by hertz generator.

package api

import (
	"bocchi/api/biz/rpc"
	"bocchi/kitex_gen/party"
	"bocchi/pkg/pack"
	"context"

	api "bocchi/api/biz/model/api"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// CreateParty .
// @Summary create_party
// @Description create party
// @Accept json/form
// @Produce json
// @Param title query string true "标题"
// @Param content query string true "介绍"
// @Param type query int true "类型"
// @Param province query string true "活动省份"
// @Param city query string true "活动城市"
// @Param start_time query string true "开始时间(例:2006-01-02)"
// @Param end_time query string true "结束时间(例:2006-01-02)"
// @Param access-token header string true "access-token"
// @router /bocchi/party/create [POST]
func CreateParty(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.CreatePartyRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.CreatePartyResponse)

	v, _ := c.Get("current_user_id")
	id, _ := v.(int64)

	rpcResp, err := rpc.PartyCreate(ctx, &party.CreatePartyRequest{
		FounderId: id,
		Title:     req.Title,
		Content:   req.Content,
		Type:      req.Type,
		Province:  req.Province,
		City:      req.City,
		StartTime: req.StartTime,
		EndTime:   req.EndTime,
	})
	if err != nil {
		pack.SendRPCFailResp(c, err)
		return
	}
	resp.Base = pack.ConvertToAPIBaseResp(rpcResp.Base)
	c.JSON(consts.StatusOK, resp)
}

// JoinParty .
// @router /bocchi/party/apply [GET]
func JoinParty(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.JoinPartyRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.JoinPartyResponse)

	c.JSON(consts.StatusOK, resp)
}

// ApplyList .
// @router /bocchi/party/apply/list [GET]
func ApplyList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.ApplyListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.ApplyListResponse)

	c.JSON(consts.StatusOK, resp)
}

// PermitJoin .
// @router /bocchi/party/apply/permit [GET]
func PermitJoin(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.PermitJoinRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.PermitJoinResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetPartyMembers .
// @router /bocchi/party/members [GET]
func GetPartyMembers(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.GetPartyMembersRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.GetPartyMembersResponse)

	c.JSON(consts.StatusOK, resp)
}

// SearchParty .
// @router /bocchi/party/search [POST]
func SearchParty(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.SearchPartyRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.SearchPartyResponse)

	c.JSON(consts.StatusOK, resp)
}
