// Code generated by hertz generator.

package main

import (
	"bocchi/api/biz/mw/jwt"
	"bocchi/api/biz/rpc"
	"bocchi/config"
	"bocchi/pkg/constants"
	"bocchi/pkg/utils"
	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/cloudwego/kitex/pkg/klog"
	"github.com/hertz-contrib/cors"
	"time"
)

var listenAddr string

func Init() {
	config.Init(constants.APIServiceName)
	rpc.Init()
	jwt.Init()
}
func main() {
	Init()
	//获取addr
	for index, addr := range config.Service.AddrList {
		if ok := utils.AddrCheck(addr); ok {
			listenAddr = addr
			break
		}

		if index == len(config.Service.AddrList)-1 {
			klog.Fatal("not available addr")
		}
	}
	h := server.New(
		server.WithHostPorts(listenAddr),
		server.WithStreamBody(true),
		server.WithMaxRequestBodySize(constants.MaxRequestBodySize), //最大字节数
	)

	h.Use(cors.New(cors.Config{
		AllowAllOrigins:        true,
		AllowMethods:           []string{"GET", "POST", "PUT", "PATCH", "DELETE", "HEAD", "OPTIONS"},
		AllowHeaders:           []string{"Origin", "Content-Length", "Content-Type"},
		ExposeHeaders:          []string{"Content-Length"},
		AllowCredentials:       true,
		AllowWebSockets:        true,
		AllowFiles:             true,
		AllowBrowserExtensions: true,
		AllowWildcard:          true,
		MaxAge:                 24 * time.Hour,
	}))
	//websocket
	//NoHijackConnPool 将控制是否使用缓存池来获取/释放劫持连接。
	//如果使用池，将提升内存资源分配的性能，但无法避免二次关闭连接导致的异常。
	h.NoHijackConnPool = true
	//go monitor.Manager.Listen()

	register(h)
	h.Spin()
}
